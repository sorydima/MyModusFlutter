name: MyModus CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  FLUTTER_VERSION: '3.19.0'
  DART_VERSION: '3.2.0'

jobs:
  # Flutter Tests & Build
  flutter:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
      
      - name: Setup Dart
        uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ env.DART_VERSION }}
      
      - name: Install dependencies
        run: |
          cd frontend
          flutter pub get
          cd ../backend
          dart pub get
      
      - name: Analyze Flutter code
        run: |
          cd frontend
          flutter analyze
      
      - name: Run Flutter tests
        run: |
          cd frontend
          flutter test
      
      - name: Run Dart tests
        run: |
          cd backend
          dart test
      
      - name: Build Flutter web
        run: |
          cd frontend
          flutter build web --release
      
      - name: Build Flutter Android APK
        run: |
          cd frontend
          flutter build apk --release
      
      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: mymodus-android
          path: frontend/build/app/outputs/flutter-apk/app-release.apk

  # Backend Build & Test
  backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Dart
        uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ env.DART_VERSION }}
      
      - name: Install dependencies
        run: |
          cd backend
          dart pub get
      
      - name: Run backend tests
        run: |
          cd backend
          dart test
      
      - name: Build backend
        run: |
          cd backend
          dart compile exe bin/server.dart -o bin/server

  # Docker Build & Push
  docker:
    needs: [flutter, backend]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and push Backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/mymodus-backend:latest
      
      - name: Build and push Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/mymodus-frontend:latest

  # Deploy to Production
  deploy:
    needs: [docker]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
      - name: Deploy to production
        run: |
          echo "Deploying to production..."
          # Add your deployment commands here
          # Example: kubectl apply -f k8s/
          # Example: docker-compose -f docker-compose.prod.yml up -d

  # Security Scan
  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
