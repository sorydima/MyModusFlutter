# MyModus IPFS Infrastructure Startup Script for Windows
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ IPFS —É–∑–ª–∞, –∫–ª–∞—Å—Ç–µ—Ä–∞ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤

param(
    [Parameter(Position=0)]
    [string]$Command = "start"
)

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
$Red = "Red"
$Green = "Green"
$Yellow = "Yellow"
$Blue = "Blue"
$White = "White"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function Write-Info {
    param([string]$Message)
    Write-Host "[INFO] $Message" -ForegroundColor $Blue
}

function Write-Success {
    param([string]$Message)
    Write-Host "[SUCCESS] $Message" -ForegroundColor $Green
}

function Write-Warning {
    param([string]$Message)
    Write-Host "[WARNING] $Message" -ForegroundColor $Yellow
}

function Write-Error {
    param([string]$Message)
    Write-Host "[ERROR] $Message" -ForegroundColor $Red
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
function Test-Dependencies {
    Write-Info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    if (-not (Get-Command docker -ErrorAction SilentlyContinue)) {
        Write-Error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Desktop."
        exit 1
    }
    
    if (-not (Get-Command docker-compose -ErrorAction SilentlyContinue)) {
        Write-Error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose."
        exit 1
    }
    
    Write-Success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Docker
function Test-DockerStatus {
    Write-Info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Docker..."
    
    try {
        docker info | Out-Null
        Write-Success "Docker –∑–∞–ø—É—â–µ–Ω"
    } catch {
        Write-Error "Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Docker Desktop."
        exit 1
    }
}

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
function New-Directories {
    Write-Info "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
    
    $directories = @(
        "ipfs-data",
        "ipfs-staging", 
        "cluster-data",
        "prometheus-data",
        "logs"
    )
    
    foreach ($dir in $directories) {
        if (-not (Test-Path $dir)) {
            New-Item -ItemType Directory -Path $dir | Out-Null
        }
    }
    
    Write-Success "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã"
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
function New-Configs {
    Write-Info "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."
    
    # IPFS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    if (-not (Test-Path "ipfs-config")) {
        New-Item -ItemType Directory -Path "ipfs-config" | Out-Null
        Write-Info "IPFS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ"
    }
    
    # Cluster –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    if (-not (Test-Path "cluster-config")) {
        New-Item -ItemType Directory -Path "cluster-config" | Out-Null
        
        $clusterConfig = @"
{
  "cluster": {
    "id": "mymodus-cluster",
    "private_key": "generated-key-will-be-here",
    "secret": "your-cluster-secret-here"
  },
  "consensus": {
    "crdt": {
      "cluster_name": "mymodus-cluster",
      "trusted_peers": []
    }
  },
  "ipfs_connector": {
    "ipfshttp": {
      "node_multiaddress": "/dns4/ipfs-node/tcp/5001/http"
    }
  },
  "monitor": {
    "monitoring_interval": "2s"
  }
}
"@
        
        $clusterConfig | Out-File -FilePath "cluster-config/service.json" -Encoding UTF8
        Write-Info "Cluster –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞"
    }
    
    Write-Success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã"
}

# –ó–∞–ø—É—Å–∫ IPFS –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
function Start-IPFSInfrastructure {
    Write-Info "–ó–∞–ø—É—Å–∫ IPFS –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã..."
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    docker-compose -f docker-compose.ipfs.yml down 2>$null
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
    docker-compose -f docker-compose.ipfs.yml up -d
    
    Write-Success "IPFS –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞"
}

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
function Wait-ForServices {
    Write-Info "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    # IPFS Node
    Write-Info "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ IPFS —É–∑–ª–∞..."
    do {
        try {
            $response = Invoke-WebRequest -Uri "http://localhost:5001/api/v0/version" -UseBasicParsing -TimeoutSec 5
            break
        } catch {
            Write-Host "." -NoNewline
            Start-Sleep -Seconds 2
        }
    } while ($true)
    Write-Host ""
    Write-Success "IPFS —É–∑–µ–ª –≥–æ—Ç–æ–≤"
    
    # IPFS Gateway
    Write-Info "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ IPFS Gateway..."
    do {
        try {
            $response = Invoke-WebRequest -Uri "http://localhost:8080/ipfs/QmUNLLsPACCz1vLxQVkXqqLX5R1X345qqfHbsf67hvA3Nn" -UseBasicParsing -TimeoutSec 5
            break
        } catch {
            Write-Host "." -NoNewline
            Start-Sleep -Seconds 2
        }
    } while ($true)
    Write-Host ""
    Write-Success "IPFS Gateway –≥–æ—Ç–æ–≤"
    
    # IPFS Dashboard
    Write-Info "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ IPFS Dashboard..."
    do {
        try {
            $response = Invoke-WebRequest -Uri "http://localhost:5000" -UseBasicParsing -TimeoutSec 5
            break
        } catch {
            Write-Host "." -NoNewline
            Start-Sleep -Seconds 2
        }
    } while ($true)
    Write-Host ""
    Write-Success "IPFS Dashboard –≥–æ—Ç–æ–≤"
    
    # Prometheus
    Write-Info "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Prometheus..."
    do {
        try {
            $response = Invoke-WebRequest -Uri "http://localhost:9090" -UseBasicParsing -TimeoutSec 5
            break
        } catch {
            Write-Host "." -NoNewline
            Start-Sleep -Seconds 2
        }
    } while ($true)
    Write-Host ""
    Write-Success "Prometheus –≥–æ—Ç–æ–≤"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
function Test-ServicesStatus {
    Write-Info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    Write-Host ""
    Write-Host "=== –°—Ç–∞—Ç—É—Å IPFS —Å–µ—Ä–≤–∏—Å–æ–≤ ===" -ForegroundColor $White
    docker-compose -f docker-compose.ipfs.yml ps
    
    Write-Host ""
    Write-Host "=== IPFS Node –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ===" -ForegroundColor $White
    try {
        $version = Invoke-WebRequest -Uri "http://localhost:5001/api/v0/version" -UseBasicParsing
        $version.Content | ConvertFrom-Json | ConvertTo-Json
    } catch {
        Write-Host "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏" -ForegroundColor $Yellow
    }
    
    Write-Host ""
    Write-Host "=== IPFS Gateway —Å—Ç–∞—Ç—É—Å ===" -ForegroundColor $White
    try {
        $health = Invoke-WebRequest -Uri "http://localhost:8080/health" -UseBasicParsing
        $health.Content | ConvertFrom-Json | ConvertTo-Json
    } catch {
        Write-Host "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å Gateway" -ForegroundColor $Yellow
    }
}

# –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–µ
function Show-AccessInfo {
    Write-Host ""
    Write-Host "=== –î–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–∏—Å–∞–º ===" -ForegroundColor $White
    Write-Host "IPFS Node API:     http://localhost:5001" -ForegroundColor $White
    Write-Host "IPFS Gateway:      http://localhost:8080" -ForegroundColor $White
    Write-Host "IPFS Dashboard:    http://localhost:5000" -ForegroundColor $White
    Write-Host "IPFS Cluster:      http://localhost:9094" -ForegroundColor $White
    Write-Host "Prometheus:        http://localhost:9090" -ForegroundColor $White
    Write-Host "Nginx Gateway:     http://localhost:8081" -ForegroundColor $White
    
    Write-Host ""
    Write-Host "=== –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ===" -ForegroundColor $White
    Write-Host "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å:  docker-compose -f docker-compose.ipfs.yml ps" -ForegroundColor $White
    Write-Host "–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤:    docker-compose -f docker-compose.ipfs.yml logs -f" -ForegroundColor $White
    Write-Host "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å:        docker-compose -f docker-compose.ipfs.yml down" -ForegroundColor $White
    Write-Host ""
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function Main {
    Write-Host "üöÄ MyModus IPFS Infrastructure Startup" -ForegroundColor $Green
    Write-Host "======================================" -ForegroundColor $Green
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    Test-Dependencies
    Test-DockerStatus
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
    New-Directories
    New-Configs
    
    # –ó–∞–ø—É—Å–∫
    Start-IPFSInfrastructure
    Wait-ForServices
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞
    Test-ServicesStatus
    Show-AccessInfo
    
    Write-Success "IPFS –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!"
    Write-Host ""
    Write-Host "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å IPFS –≤ MyModus!" -ForegroundColor $Green
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
switch ($Command) {
    "start" {
        Main
    }
    "stop" {
        Write-Info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ IPFS –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã..."
        docker-compose -f docker-compose.ipfs.yml down
        Write-Success "IPFS –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
    }
    "restart" {
        Write-Info "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ IPFS –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã..."
        docker-compose -f docker-compose.ipfs.yml restart
        Write-Success "IPFS –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞"
    }
    "status" {
        Test-ServicesStatus
    }
    "logs" {
        docker-compose -f docker-compose.ipfs.yml logs -f
    }
    "clean" {
        Write-Warning "–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö IPFS..."
        docker-compose -f docker-compose.ipfs.yml down -v
        Remove-Item -Path "ipfs-data", "ipfs-staging", "cluster-data", "prometheus-data" -Recurse -Force -ErrorAction SilentlyContinue
        Write-Success "–î–∞–Ω–Ω—ã–µ IPFS –æ—á–∏—â–µ–Ω—ã"
    }
    default {
        Write-Host "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .\start_ipfs.ps1 {start|stop|restart|status|logs|clean}" -ForegroundColor $White
        Write-Host "  start   - –ó–∞–ø—É—Å—Ç–∏—Ç—å IPFS –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É" -ForegroundColor $White
        Write-Host "  stop    - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å IPFS –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É" -ForegroundColor $White
        Write-Host "  restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å IPFS –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É" -ForegroundColor $White
        Write-Host "  status  - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤" -ForegroundColor $White
        Write-Host "  logs    - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏" -ForegroundColor $White
        Write-Host "  clean   - –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ" -ForegroundColor $White
        exit 1
    }
}
