#!/bin/bash

# MyModus IPFS Infrastructure Startup Script
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ IPFS —É–∑–ª–∞, –∫–ª–∞—Å—Ç–µ—Ä–∞ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    if ! command -v docker &> /dev/null; then
        log_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker."
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        log_error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose."
        exit 1
    fi
    
    log_success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Docker
check_docker_status() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Docker..."
    
    if ! docker info &> /dev/null; then
        log_error "Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Docker daemon."
        exit 1
    fi
    
    log_success "Docker –∑–∞–ø—É—â–µ–Ω"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
create_directories() {
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
    
    mkdir -p ipfs-data
    mkdir -p ipfs-staging
    mkdir -p cluster-data
    mkdir -p prometheus-data
    mkdir -p logs
    
    log_success "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã"
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
generate_configs() {
    log_info "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."
    
    # IPFS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    if [ ! -f "ipfs-config/config" ]; then
        mkdir -p ipfs-config
        log_info "–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π IPFS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é IPFS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        echo "IPFS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ"
    fi
    
    # Cluster –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    if [ ! -f "cluster-config/service.json" ]; then
        mkdir -p cluster-config
        log_info "–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π Cluster –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
        
        cat > cluster-config/service.json << EOF
{
  "cluster": {
    "id": "mymodus-cluster",
    "private_key": "generated-key-will-be-here",
    "secret": "your-cluster-secret-here"
  },
  "consensus": {
    "crdt": {
      "cluster_name": "mymodus-cluster",
      "trusted_peers": []
    }
  },
  "ipfs_connector": {
    "ipfshttp": {
      "node_multiaddress": "/dns4/ipfs-node/tcp/5001/http"
    }
  },
  "monitor": {
    "monitoring_interval": "2s"
  }
}
EOF
    fi
    
    log_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã"
}

# –ó–∞–ø—É—Å–∫ IPFS –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
start_ipfs_infrastructure() {
    log_info "–ó–∞–ø—É—Å–∫ IPFS –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã..."
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    docker-compose -f docker-compose.ipfs.yml down 2>/dev/null || true
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
    docker-compose -f docker-compose.ipfs.yml up -d
    
    log_success "IPFS –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞"
}

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
wait_for_services() {
    log_info "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    # IPFS Node
    log_info "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ IPFS —É–∑–ª–∞..."
    until curl -s http://localhost:5001/api/v0/version > /dev/null 2>&1; do
        echo -n "."
        sleep 2
    done
    echo ""
    log_success "IPFS —É–∑–µ–ª –≥–æ—Ç–æ–≤"
    
    # IPFS Gateway
    log_info "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ IPFS Gateway..."
    until curl -s http://localhost:8080/ipfs/QmUNLLsPACCz1vLxQVkXqqLX5R1X345qqfHbsf67hvA3Nn > /dev/null 2>&1; do
        echo -n "."
        sleep 2
    done
    echo ""
    log_success "IPFS Gateway –≥–æ—Ç–æ–≤"
    
    # IPFS Dashboard
    log_info "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ IPFS Dashboard..."
    until curl -s http://localhost:5000 > /dev/null 2>&1; do
        echo -n "."
        sleep 2
    done
    echo ""
    log_success "IPFS Dashboard –≥–æ—Ç–æ–≤"
    
    # Prometheus
    log_info "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Prometheus..."
    until curl -s http://localhost:9090 > /dev/null 2>&1; do
        echo -n "."
        sleep 2
    done
    echo ""
    log_success "Prometheus –≥–æ—Ç–æ–≤"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
check_services_status() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    echo ""
    echo "=== –°—Ç–∞—Ç—É—Å IPFS —Å–µ—Ä–≤–∏—Å–æ–≤ ==="
    docker-compose -f docker-compose.ipfs.yml ps
    
    echo ""
    echo "=== IPFS Node –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ==="
    curl -s http://localhost:5001/api/v0/version | jq '.' 2>/dev/null || echo "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏"
    
    echo ""
    echo "=== IPFS Gateway —Å—Ç–∞—Ç—É—Å ==="
    curl -s http://localhost:8080/health | jq '.' 2>/dev/null || echo "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å Gateway"
    
    echo ""
    echo "=== Cluster —Å—Ç–∞—Ç—É—Å ==="
    curl -s http://localhost:9094/health | jq '.' 2>/dev/null || echo "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å Cluster"
}

# –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–µ
show_access_info() {
    echo ""
    echo "=== –î–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–∏—Å–∞–º ==="
    echo "IPFS Node API:     http://localhost:5001"
    echo "IPFS Gateway:      http://localhost:8080"
    echo "IPFS Dashboard:    http://localhost:5000"
    echo "IPFS Cluster:      http://localhost:9094"
    echo "Prometheus:        http://localhost:9090"
    echo "Nginx Gateway:     http://localhost:8081"
    echo ""
    echo "=== –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ==="
    echo "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å:  docker-compose -f docker-compose.ipfs.yml ps"
    echo "–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤:    docker-compose -f docker-compose.ipfs.yml logs -f"
    echo "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å:        docker-compose -f docker-compose.ipfs.yml down"
    echo ""
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "üöÄ MyModus IPFS Infrastructure Startup"
    echo "======================================"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    check_dependencies
    check_docker_status
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
    create_directories
    generate_configs
    
    # –ó–∞–ø—É—Å–∫
    start_ipfs_infrastructure
    wait_for_services
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞
    check_services_status
    show_access_info
    
    log_success "IPFS –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!"
    echo ""
    echo "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å IPFS –≤ MyModus!"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
case "${1:-start}" in
    "start")
        main
        ;;
    "stop")
        log_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ IPFS –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã..."
        docker-compose -f docker-compose.ipfs.yml down
        log_success "IPFS –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        ;;
    "restart")
        log_info "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ IPFS –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã..."
        docker-compose -f docker-compose.ipfs.yml restart
        log_success "IPFS –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞"
        ;;
    "status")
        check_services_status
        ;;
    "logs")
        docker-compose -f docker-compose.ipfs.yml logs -f
        ;;
    "clean")
        log_warning "–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö IPFS..."
        docker-compose -f docker-compose.ipfs.yml down -v
        rm -rf ipfs-data ipfs-staging cluster-data prometheus-data
        log_success "–î–∞–Ω–Ω—ã–µ IPFS –æ—á–∏—â–µ–Ω—ã"
        ;;
    *)
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 {start|stop|restart|status|logs|clean}"
        echo "  start   - –ó–∞–ø—É—Å—Ç–∏—Ç—å IPFS –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É"
        echo "  stop    - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å IPFS –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É"
        echo "  restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å IPFS –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É"
        echo "  status  - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤"
        echo "  logs    - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"
        echo "  clean   - –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ"
        exit 1
        ;;
esac
