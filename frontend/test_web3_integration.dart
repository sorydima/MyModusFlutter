import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:provider/provider.dart';
import 'lib/providers/web3_provider.dart';
import 'lib/services/web3_test_service.dart';
import 'lib/models/web3_models.dart';

/// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Web3 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
/// –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
void main() {
  runApp(const Web3TestApp());
}

class Web3TestApp extends StatelessWidget {
  const Web3TestApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Web3 Integration Test',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        useMaterial3: true,
      ),
      home: const Web3TestHomePage(),
    );
  }
}

class Web3TestHomePage extends StatefulWidget {
  const Web3TestHomePage({super.key});

  @override
  State<Web3TestHomePage> createState() => _Web3TestHomePageState();
}

class _Web3TestHomePageState extends State<Web3TestHomePage> {
  final Web3TestService _testService = Web3TestService();
  List<String> _testResults = [];
  bool _isRunningTests = false;

  @override
  void initState() {
    super.initState();
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _runAllTests();
    });
  }

  Future<void> _runAllTests() async {
    setState(() {
      _isRunningTests = true;
      _testResults.clear();
    });

    try {
      // –¢–µ—Å—Ç 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
      _addTestResult('–¢–µ—Å—Ç 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞');
      final walletInfo = await _testService.connectWallet();
      if (walletInfo != null) {
        _addTestResult('‚úÖ –ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω: ${walletInfo.address}');
        _addTestResult('   –ë–∞–ª–∞–Ω—Å: ${walletInfo.balance} ETH');
        _addTestResult('   –°–µ—Ç—å: ${walletInfo.network}');
      } else {
        _addTestResult('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞');
      }

      // –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ NFT
      _addTestResult('\n–¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ NFT');
      final nfts = await _testService.getAllNFTs();
      _addTestResult('‚úÖ –ü–æ–ª—É—á–µ–Ω–æ NFT: ${nfts.length}');
      for (final nft in nfts.take(2)) {
        _addTestResult('   - ${nft.name} (${nft.category})');
      }

      // –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
      _addTestResult('\n–¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏');
      final tokens = await _testService.getUserLoyaltyTokens('test');
      _addTestResult('‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: ${tokens.length}');
      for (final token in tokens) {
        _addTestResult('   - ${token.name} (${token.symbol}): ${token.balance}');
      }

      // –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      _addTestResult('\n–¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
      final transactions = await _testService.getTransactionHistory('test');
      _addTestResult('‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${transactions.length}');
      for (final tx in transactions.take(2)) {
        _addTestResult('   - ${tx.type.name}: ${tx.value} ETH');
      }

      // –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ç–∏
      _addTestResult('\n–¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ç–∏');
      final network = await _testService.getCurrentNetwork();
      _addTestResult('‚úÖ –°–µ—Ç—å: ${network.name} (Chain ID: ${network.chainId})');
      _addTestResult('   RPC: ${network.rpcUrl}');
      _addTestResult('   Explorer: ${network.explorerUrl}');

      // –¢–µ—Å—Ç 6: –ú–∏–Ω—Ç–∏–Ω–≥ NFT
      _addTestResult('\n–¢–µ—Å—Ç 6: –ú–∏–Ω—Ç–∏–Ω–≥ NFT');
      final mintSuccess = await _testService.mintNFT(
        name: 'Test NFT',
        description: 'Test Description',
        imageUrl: 'https://via.placeholder.com/300x300',
        category: 'Test',
        attributes: {'test': 'true'},
      );
      if (mintSuccess) {
        _addTestResult('‚úÖ NFT —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
      } else {
        _addTestResult('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è NFT');
      }

      // –¢–µ—Å—Ç 7: –ú–∏–Ω—Ç–∏–Ω–≥ —Ç–æ–∫–µ–Ω–æ–≤ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
      _addTestResult('\n–¢–µ—Å—Ç 7: –ú–∏–Ω—Ç–∏–Ω–≥ —Ç–æ–∫–µ–Ω–æ–≤ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏');
      final tokenMintSuccess = await _testService.mintLoyaltyTokens(
        contractAddress: '0x1234567890123456789012345678901234567890',
        amount: '100',
      );
      if (tokenMintSuccess) {
        _addTestResult('‚úÖ –¢–æ–∫–µ–Ω—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã');
      } else {
        _addTestResult('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏');
      }

      _addTestResult('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
      _addTestResult('Web3 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.');

    } catch (e) {
      _addTestResult('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤: $e');
    } finally {
      setState(() {
        _isRunningTests = false;
      });
    }
  }

  void _addTestResult(String result) {
    setState(() {
      _testResults.add(result);
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Web3 Integration Test'),
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
        actions: [
          if (!_isRunningTests)
            IconButton(
              onPressed: _runAllTests,
              icon: const Icon(Icons.refresh),
              tooltip: '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –∑–∞–Ω–æ–≤–æ',
            ),
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            Card(
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Web3 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏',
                      style: Theme.of(context).textTheme.headlineSmall,
                    ),
                    const SizedBox(height: 8),
                    Text(
                      '–≠—Ç–æ—Ç —ç–∫—Ä–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã Web3 —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏.',
                      style: Theme.of(context).textTheme.bodyMedium,
                    ),
                    const SizedBox(height: 8),
                    Row(
                      children: [
                        Icon(
                          _isRunningTests ? Icons.hourglass_empty : Icons.check_circle,
                          color: _isRunningTests ? Colors.orange : Colors.green,
                        ),
                        const SizedBox(width: 8),
                        Text(
                          _isRunningTests ? '–¢–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è...' : '–¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã',
                          style: TextStyle(
                            color: _isRunningTests ? Colors.orange : Colors.green,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            ),
            
            const SizedBox(height: 16),
            
            // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
            Expanded(
              child: Card(
                child: Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        children: [
                          Icon(
                            _isRunningTests ? Icons.sync : Icons.assessment,
                            color: _isRunningTests ? Colors.blue : Colors.green,
                          ),
                          const SizedBox(width: 8),
                          Text(
                            '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:',
                            style: Theme.of(context).textTheme.titleMedium,
                          ),
                        ],
                      ),
                      const SizedBox(height: 16),
                      Expanded(
                        child: _isRunningTests
                            ? const Center(
                                child: Column(
                                  mainAxisAlignment: MainAxisAlignment.center,
                                  children: [
                                    CircularProgressIndicator(),
                                    SizedBox(height: 16),
                                    Text('–í—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —Ç–µ—Å—Ç—ã...'),
                                  ],
                                ),
                              )
                            : ListView.builder(
                                itemCount: _testResults.length,
                                itemBuilder: (context, index) {
                                  final result = _testResults[index];
                                  final isSuccess = result.contains('‚úÖ');
                                  final isError = result.contains('‚ùå');
                                  final isInfo = result.contains('–¢–µ—Å—Ç') || result.contains('üéâ');
                                  
                                  Color textColor = Colors.black87;
                                  if (isSuccess) textColor = Colors.green[700]!;
                                  if (isError) textColor = Colors.red[700]!;
                                  if (isInfo) textColor = Colors.blue[700]!;
                                  
                                  return Padding(
                                    padding: const EdgeInsets.symmetric(vertical: 2.0),
                                    child: Text(
                                      result,
                                      style: TextStyle(
                                        color: textColor,
                                        fontFamily: 'monospace',
                                        fontSize: 12,
                                      ),
                                    ),
                                  );
                                },
                              ),
                      ),
                    ],
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}
