import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../services/notification_integration_service.dart';
import '../services/real_notification_service.dart';

/// –≠–∫—Ä–∞–Ω –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –¥—Ä—É–≥–∏–º–∏ –º–æ–¥—É–ª—è–º–∏
class NotificationIntegrationDemoScreen extends StatefulWidget {
  const NotificationIntegrationDemoScreen({super.key});

  @override
  State<NotificationIntegrationDemoScreen> createState() => _NotificationIntegrationDemoScreenState();
}

class _NotificationIntegrationDemoScreenState extends State<NotificationIntegrationDemoScreen>
    with TickerProviderStateMixin {
  late TabController _tabController;
  bool _isLoading = false;
  String? _statusMessage;
  bool _isSuccess = false;

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 6, vsync: this);
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'),
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
        bottom: TabBar(
          controller: _tabController,
          isScrollable: true,
          tabs: const [
            Tab(text: 'AI', icon: Icon(Icons.psychology)),
            Tab(text: 'AR', icon: Icon(Icons.camera_alt)),
            Tab(text: '–õ–æ—è–ª—å–Ω–æ—Å—Ç—å', icon: Icon(Icons.star)),
            Tab(text: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞', icon: Icon(Icons.analytics)),
            Tab(text: '–ö–æ–º–º–µ—Ä—Ü–∏—è', icon: Icon(Icons.shopping_cart)),
            Tab(text: '–°–∏—Å—Ç–µ–º–∞', icon: Icon(Icons.settings)),
          ],
        ),
      ),
      body: Column(
        children: [
          // –°—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏–µ
          if (_statusMessage != null)
            Container(
              width: double.infinity,
              padding: const EdgeInsets.all(16),
              margin: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: _isSuccess ? Colors.green[50] : Colors.red[50],
                border: Border.all(
                  color: _isSuccess ? Colors.green : Colors.red,
                  width: 1,
                ),
                borderRadius: BorderRadius.circular(8),
              ),
              child: Row(
                children: [
                  Icon(
                    _isSuccess ? Icons.check_circle : Icons.error,
                    color: _isSuccess ? Colors.green : Colors.red,
                  ),
                  const SizedBox(width: 8),
                  Expanded(
                    child: Text(
                      _statusMessage!,
                      style: TextStyle(
                        color: _isSuccess ? Colors.green[800] : Colors.red[800],
                      ),
                    ),
                  ),
                  IconButton(
                    onPressed: () => setState(() => _statusMessage = null),
                    icon: const Icon(Icons.close),
                    iconSize: 20,
                  ),
                ],
              ),
            ),
          
          // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
          Expanded(
            child: TabBarView(
              controller: _tabController,
              children: [
                _buildAITab(),
                _buildARTab(),
                _buildLoyaltyTab(),
                _buildAnalyticsTab(),
                _buildCommerceTab(),
                _buildSystemTab(),
              ],
            ),
          ),
        ],
      ),
    );
  }

  // ===== AI TAB =====

  Widget _buildAITab() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            'ü§ñ AI Personal Shopper',
            style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 16),
          const Text(
            '–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–æ–±—ã—Ç–∏—è—Ö AI –º–æ–¥—É–ª—è',
            style: TextStyle(fontSize: 16, color: Colors.grey),
          ),
          const SizedBox(height: 24),
          
          _buildDemoButton(
            'üéØ –ù–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
            '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤—ã—Ö AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö',
            () => _sendAIRecommendations(),
          ),
          
          _buildDemoButton(
            'üí∞ –°–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã',
            '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–Ω–∏–∂–µ–Ω–∏–∏ —Ü–µ–Ω—ã –Ω–∞ —Ç–æ–≤–∞—Ä',
            () => _sendPriceAlert(),
          ),
          
          _buildDemoButton(
            'üéÅ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ',
            '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏',
            () => _sendPersonalizedOffer(),
          ),
        ],
      ),
    );
  }

  // ===== AR TAB =====

  Widget _buildARTab() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            'üì± AR Fitting',
            style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 16),
          const Text(
            '–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–æ–±—ã—Ç–∏—è—Ö AR –º–æ–¥—É–ª—è',
            style: TextStyle(fontSize: 16, color: Colors.grey),
          ),
          const SizedBox(height: 24),
          
          _buildDemoButton(
            'üëó –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∫–∏',
            '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ AR –ø—Ä–∏–º–µ—Ä–∫–∏',
            () => _sendARFittingComplete(),
          ),
          
          _buildDemoButton(
            'üìè –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞',
            '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–∞',
            () => _sendSizeRecommendation(),
          ),
          
          _buildDemoButton(
            'üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–ª–∞',
            '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–ª–∞',
            () => _sendBodyAnalysisUpdate(),
          ),
        ],
      ),
    );
  }

  // ===== LOYALTY TAB =====

  Widget _buildLoyaltyTab() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            '‚≠ê Blockchain Loyalty',
            style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 16),
          const Text(
            '–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–æ–±—ã—Ç–∏—è—Ö –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏',
            style: TextStyle(fontSize: 16, color: Colors.grey),
          ),
          const SizedBox(height: 24),
          
          _buildDemoButton(
            'üíé –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤',
            '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏',
            () => _sendLoyaltyPointsEarned(),
          ),
          
          _buildDemoButton(
            'üèÜ –ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è',
            '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏',
            () => _sendTierUpgrade(),
          ),
          
          _buildDemoButton(
            'üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å',
            '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º –±–æ–Ω—É—Å–µ',
            () => _sendReferralBonus(),
          ),
          
          _buildDemoButton(
            'üåÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å',
            '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–º –±–æ–Ω—É—Å–µ',
            () => _sendDailyLoginReward(),
          ),
          
          _buildDemoButton(
            'ü™ô –ö—Ä–∏–ø—Ç–æ-–Ω–∞–≥—Ä–∞–¥–∞',
            '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—Ä–∏–ø—Ç–æ-–Ω–∞–≥—Ä–∞–¥–µ',
            () => _sendCryptoReward(),
          ),
        ],
      ),
    );
  }

  // ===== ANALYTICS TAB =====

  Widget _buildAnalyticsTab() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            'üìä Social Analytics',
            style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 16),
          const Text(
            '–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–æ–±—ã—Ç–∏—è—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–∏',
            style: TextStyle(fontSize: 16, color: Colors.grey),
          ),
          const SizedBox(height: 24),
          
          _buildDemoButton(
            'üìà –¢—Ä–µ–Ω–¥',
            '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Ç—Ä–µ–Ω–¥–µ',
            () => _sendTrendAlert(),
          ),
          
          _buildDemoButton(
            'üëÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞',
            '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞',
            () => _sendCompetitorUpdate(),
          ),
          
          _buildDemoButton(
            'üë• –ò–Ω—Å–∞–π—Ç –∞—É–¥–∏—Ç–æ—Ä–∏–∏',
            '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–Ω—Å–∞–π—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏',
            () => _sendAudienceInsight(),
          ),
        ],
      ),
    );
  }

  // ===== COMMERCE TAB =====

  Widget _buildCommerceTab() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            'üåü Social Commerce',
            style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 16),
          const Text(
            '–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–æ–±—ã—Ç–∏—è—Ö –∫–æ–º–º–µ—Ä—Ü–∏–∏',
            style: TextStyle(fontSize: 16, color: Colors.grey),
          ),
          const SizedBox(height: 24),
          
          _buildDemoButton(
            'üì∫ Live-—Å—Ç—Ä–∏–º',
            '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ live-—Å—Ç—Ä–∏–º–µ',
            () => _sendLiveStreamReminder(),
          ),
          
          _buildDemoButton(
            'üë• –ì—Ä—É–ø–ø–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞',
            '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø–æ–≤–æ–π –ø–æ–∫—É–ø–∫–∏',
            () => _sendGroupPurchaseUpdate(),
          ),
          
          _buildDemoButton(
            '‚≠ê –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤',
            '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –æ—Ç–∑—ã–≤–µ',
            () => _sendNewReview(),
          ),
          
          _buildDemoButton(
            'ü§ù –ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ',
            '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞',
            () => _sendPartnershipApproved(),
          ),
        ],
      ),
    );
  }

  // ===== SYSTEM TAB =====

  Widget _buildSystemTab() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            '‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
            style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 16),
          const Text(
            '–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
            style: TextStyle(fontSize: 16, color: Colors.grey),
          ),
          const SizedBox(height: 24),
          
          _buildDemoButton(
            'üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã',
            '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã',
            () => _sendSystemUpdate(),
          ),
          
          _buildDemoButton(
            'üîß –¢–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ',
            '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏',
            () => _sendMaintenance(),
          ),
          
          _buildDemoButton(
            'üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å',
            '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
            () => _sendSecurityAlert(),
          ),
          
          const SizedBox(height: 32),
          
          const Text(
            'üéØ –ú–∞—Å—Å–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
            style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 16),
          
          _buildDemoButton(
            'üì¢ –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
            '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–∞—Å—Å–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
            () => _sendBulkByCategory(),
          ),
          
          _buildDemoButton(
            'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º',
            '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–∞—Å—Å–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º',
            () => _sendBulkToUsers(),
          ),
          
          const SizedBox(height: 32),
          
          const Text(
            'üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
            style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 16),
          
          _buildDemoButton(
            'üé≠ –í—Å–µ —Ç–∏–ø—ã',
            '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–µ–º–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤',
            () => _sendDemoNotifications(),
          ),
          
          _buildDemoButton(
            'üé¨ –°–∏–º—É–ª—è—Ü–∏—è —Å–æ–±—ã—Ç–∏–π',
            '–°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π',
            () => _simulateModuleEvents(),
          ),
        ],
      ),
    );
  }

  // ===== DEMO BUTTON BUILDER =====

  Widget _buildDemoButton(String title, String description, VoidCallback onPressed) {
    return Container(
      width: double.infinity,
      margin: const EdgeInsets.only(bottom: 16),
      child: ElevatedButton(
        onPressed: _isLoading ? null : onPressed,
        style: ElevatedButton.styleFrom(
          padding: const EdgeInsets.all(16),
          alignment: Alignment.centerLeft,
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              title,
              style: const TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 4),
            Text(
              description,
              style: const TextStyle(fontSize: 14, color: Colors.grey),
            ),
          ],
        ),
      ),
    );
  }

  // ===== AI NOTIFICATIONS =====

  Future<void> _sendAIRecommendations() async {
    setState(() => _isLoading = true);
    
    try {
      final service = context.read<NotificationIntegrationService>();
      final success = await service.notifyNewRecommendations(
        userId: 'demo_user_123',
        recommendations: [
          {
            'product': {
              'id': 'demo_product_1',
              'title': '–î–µ–º–æ —Ç–æ–≤–∞—Ä 1',
              'description': '–û–ø–∏—Å–∞–Ω–∏–µ –¥–µ–º–æ —Ç–æ–≤–∞—Ä–∞',
              'price': 1000,
              'imageUrl': 'https://example.com/image1.jpg',
              'productUrl': 'https://example.com/product1',
              'source': 'demo',
              'sourceId': '1',
              'categoryId': 'demo_category',
            },
            'score': 0.95,
            'reason': '–î–µ–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è',
          },
        ],
        category: '–î–µ–º–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è',
      );
      
      _showStatus(success, 'AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ', '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π');
    } catch (e) {
      _showStatus(false, null, '–û—à–∏–±–∫–∞: $e');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  Future<void> _sendPriceAlert() async {
    setState(() => _isLoading = true);
    
    try {
      final service = context.read<NotificationIntegrationService>();
      final success = await service.notifyPriceAlert(
        userId: 'demo_user_123',
        product: {
          'id': 'demo_product_2',
          'title': '–î–µ–º–æ —Ç–æ–≤–∞—Ä 2',
          'description': '–û–ø–∏—Å–∞–Ω–∏–µ –¥–µ–º–æ —Ç–æ–≤–∞—Ä–∞',
          'price': 800,
          'imageUrl': 'https://example.com/image2.jpg',
          'productUrl': 'https://example.com/product2',
          'source': 'demo',
          'sourceId': '2',
          'categoryId': 'demo_category',
        },
        oldPrice: 1000,
        newPrice: 800,
        discount: 200,
      );
      
      _showStatus(success, '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–Ω–∏–∂–µ–Ω–∏–∏ —Ü–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ü–µ–Ω–µ');
    } catch (e) {
      _showStatus(false, null, '–û—à–∏–±–∫–∞: $e');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  Future<void> _sendPersonalizedOffer() async {
    setState(() => _isLoading = true);
    
    try {
      final service = context.read<NotificationIntegrationService>();
      final success = await service.notifyPersonalizedOffer(
        userId: 'demo_user_123',
        offerType: '–°–∫–∏–¥–∫–∞',
        description: '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ 20% –Ω–∞ –≤–∞—à –ª—é–±–∏–º—ã–π –±—Ä–µ–Ω–¥',
        offerData: {'discount': 20, 'brand': '–î–µ–º–æ –±—Ä–µ–Ω–¥'},
      );
      
      _showStatus(success, '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è');
    } catch (e) {
      _showStatus(false, null, '–û—à–∏–±–∫–∞: $e');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  // ===== AR NOTIFICATIONS =====

  Future<void> _sendARFittingComplete() async {
    setState(() => _isLoading = true);
    
    try {
      final service = context.read<NotificationIntegrationService>();
      final success = await service.notifyARFittingComplete(
        userId: 'demo_user_123',
        productName: '–î–µ–º–æ —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–∏–º–µ—Ä–∫–∏',
        fittingResults: {
          'size': 'M',
          'fit': 'perfect',
          'confidence': 0.95,
        },
      );
      
      _showStatus(success, 'AR –ø—Ä–∏–º–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞', '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ AR –ø—Ä–∏–º–µ—Ä–∫–∏');
    } catch (e) {
      _showStatus(false, null, '–û—à–∏–±–∫–∞: $e');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  Future<void> _sendSizeRecommendation() async {
    setState(() => _isLoading = true);
    
    try {
      final service = context.read<NotificationIntegrationService>();
      final success = await service.notifySizeRecommendation(
        userId: 'demo_user_123',
        productName: 'AR —Ç–æ–≤–∞—Ä',
        recommendedSize: 'L',
        reason: '–ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤',
      );
      
      _showStatus(success, '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞', '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–∞');
    } catch (e) {
      _showStatus(false, null, '–û—à–∏–±–∫–∞: $e');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  Future<void> _sendBodyAnalysisUpdate() async {
    setState(() => _isLoading = true);
    
    try {
      final service = context.read<NotificationIntegrationService>();
      final success = await service.notifyBodyAnalysisUpdate(
        userId: 'demo_user_123',
        bodyMetrics: {
          'height': 175,
          'weight': 70,
          'chest': 95,
          'waist': 80,
        },
        insight: '–í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–∏–º–µ—Ä–∫–∏',
      );
      
      _showStatus(success, '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞');
    } catch (e) {
      _showStatus(false, null, '–û—à–∏–±–∫–∞: $e');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  // ===== LOYALTY NOTIFICATIONS =====

  Future<void> _sendLoyaltyPointsEarned() async {
    setState(() => _isLoading = true);
    
    try {
      final service = context.read<NotificationIntegrationService>();
      final success = await service.notifyLoyaltyPointsEarned(
        userId: 'demo_user_123',
        points: 100,
        reason: '–î–µ–º–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
        source: 'demo',
      );
      
      _showStatus(success, '–ë–∞–ª–ª—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã', '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–∞–ª–ª–æ–≤ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏');
    } catch (e) {
      _showStatus(false, null, '–û—à–∏–±–∫–∞: $e');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  Future<void> _sendTierUpgrade() async {
    setState(() => _isLoading = true);
    
    try {
      final service = context.read<NotificationIntegrationService>();
      final success = await service.notifyTierUpgrade(
        userId: 'demo_user_123',
        oldTier: 'Bronze',
        newTier: 'Silver',
        newBenefits: ['–°–∫–∏–¥–∫–∞ 5%', '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞'],
      );
      
      _showStatus(success, '–ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è');
    } catch (e) {
      _showStatus(false, null, '–û—à–∏–±–∫–∞: $e');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  Future<void> _sendReferralBonus() async {
    setState(() => _isLoading = true);
    
    try {
      final service = context.read<NotificationIntegrationService>();
      final success = await service.notifyReferralBonus(
        userId: 'demo_user_123',
        referredUserName: '–î–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        bonusPoints: 50,
      );
      
      _showStatus(success, '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞');
    } catch (e) {
      _showStatus(false, null, '–û—à–∏–±–∫–∞: $e');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  Future<void> _sendDailyLoginReward() async {
    setState(() => _isLoading = true);
    
    try {
      final service = context.read<NotificationIntegrationService>();
      final success = await service.notifyDailyLoginReward(
        userId: 'demo_user_123',
        points: 10,
        streakDays: 7,
      );
      
      _showStatus(success, '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞');
    } catch (e) {
      _showStatus(false, null, '–û—à–∏–±–∫–∞: $e');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  Future<void> _sendCryptoReward() async {
    setState(() => _isLoading = true);
    
    try {
      final service = context.read<NotificationIntegrationService>();
      final success = await service.notifyCryptoReward(
        userId: 'demo_user_123',
        tokenAmount: '0.001',
        tokenSymbol: 'ETH',
        reason: '–î–µ–º–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
      );
      
      _showStatus(success, '–ö—Ä–∏–ø—Ç–æ-–Ω–∞–≥—Ä–∞–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞', '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—Ä–∏–ø—Ç–æ-–Ω–∞–≥—Ä–∞–¥—ã');
    } catch (e) {
      _showStatus(false, null, '–û—à–∏–±–∫–∞: $e');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  // ===== ANALYTICS NOTIFICATIONS =====

  Future<void> _sendTrendAlert() async {
    setState(() => _isLoading = true);
    
    try {
      final service = context.read<NotificationIntegrationService>();
      final success = await service.notifyTrendAlert(
        userId: 'demo_user_123',
        trendType: '–ú–æ–¥–∞',
        description: '–ù–æ–≤—ã–π —Ç—Ä–µ–Ω–¥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–û–¥–µ–∂–¥–∞"',
        trendData: {
          'category': '–û–¥–µ–∂–¥–∞',
          'trend_score': 0.85,
          'growth_rate': '+15%',
        },
      );
      
      _showStatus(success, '–¢—Ä–µ–Ω–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–µ–Ω–¥–∞');
    } catch (e) {
      _showStatus(false, null, '–û—à–∏–±–∫–∞: $e');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  Future<void> _sendCompetitorUpdate() async {
    setState(() => _isLoading = true);
    
    try {
      final service = context.read<NotificationIntegrationService>();
      final success = await service.notifyCompetitorUpdate(
        userId: 'demo_user_123',
        competitorName: '–î–µ–º–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç',
        updateType: '–ù–æ–≤–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è',
        description: '–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç –≤—ã–ø—É—Å—Ç–∏–ª –Ω–æ–≤—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é',
      );
      
      _showStatus(success, '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞');
    } catch (e) {
      _showStatus(false, null, '–û—à–∏–±–∫–∞: $e');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  Future<void> _sendAudienceInsight() async {
    setState(() => _isLoading = true);
    
    try {
      final service = context.read<NotificationIntegrationService>();
      final success = await service.notifyAudienceInsight(
        userId: 'demo_user_123',
        insightType: '–î–µ–º–æ–≥—Ä–∞—Ñ–∏—è',
        description: '–ù–æ–≤—ã–π –∏–Ω—Å–∞–π—Ç –æ –≤–∞—à–µ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏',
        insightData: {
          'age_group': '25-34',
          'gender': '–∂–µ–Ω—â–∏–Ω—ã',
          'interests': ['–º–æ–¥–∞', '–∫—Ä–∞—Å–æ—Ç–∞'],
        },
      );
      
      _showStatus(success, '–ò–Ω—Å–∞–π—Ç –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Å–∞–π—Ç–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏');
    } catch (e) {
      _showStatus(false, null, '–û—à–∏–±–∫–∞: $e');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  // ===== COMMERCE NOTIFICATIONS =====

  Future<void> _sendLiveStreamReminder() async {
    setState(() => _isLoading = true);
    
    try {
      final service = context.read<NotificationIntegrationService>();
      final success = await service.notifyLiveStreamReminder(
        userId: 'demo_user_123',
        streamTitle: '–î–µ–º–æ live-—Å—Ç—Ä–∏–º',
        streamTime: DateTime.now().add(const Duration(minutes: 30)),
        hostName: '–î–µ–º–æ –≤–µ–¥—É—â–∏–π',
      );
      
      _showStatus(success, '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ live-—Å—Ç—Ä–∏–º–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ live-—Å—Ç—Ä–∏–º–µ');
    } catch (e) {
      _showStatus(false, null, '–û—à–∏–±–∫–∞: $e');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  Future<void> _sendGroupPurchaseUpdate() async {
    setState(() => _isLoading = true);
    
    try {
      final service = context.read<NotificationIntegrationService>();
      final success = await service.notifyGroupPurchaseUpdate(
        userId: 'demo_user_123',
        productName: '–î–µ–º–æ —Ç–æ–≤–∞—Ä –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–π –ø–æ–∫—É–ø–∫–∏',
        updateType: '–î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞',
        description: '–ì—Ä—É–ø–ø–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!',
        updateData: {'group_size': 5, 'discount': 15},
      );
      
      _showStatus(success, '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–≤–æ–π –ø–æ–∫—É–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–æ–≤–æ–π –ø–æ–∫—É–ø–∫–∏');
    } catch (e) {
      _showStatus(false, null, '–û—à–∏–±–∫–∞: $e');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  Future<void> _sendNewReview() async {
    setState(() => _isLoading = true);
    
    try {
      final service = context.read<NotificationIntegrationService>();
      final success = await service.notifyNewReview(
        userId: 'demo_user_123',
        productName: '–î–µ–º–æ —Ç–æ–≤–∞—Ä',
        reviewerName: '–î–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        rating: 5,
        comment: '–û—Ç–ª–∏—á–Ω—ã–π —Ç–æ–≤–∞—Ä!',
      );
      
      _showStatus(success, '–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞');
    } catch (e) {
      _showStatus(false, null, '–û—à–∏–±–∫–∞: $e');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  Future<void> _sendPartnershipApproved() async {
    setState(() => _isLoading = true);
    
    try {
      final service = context.read<NotificationIntegrationService>();
      final success = await service.notifyPartnershipApproved(
        userId: 'demo_user_123',
        partnershipType: '–ò–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä',
        description: '–í–∞—à–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ –æ–¥–æ–±—Ä–µ–Ω–æ!',
        partnershipData: {'commission': 10, 'duration': '3 –º–µ—Å—è—Ü–∞'},
      );
      
      _showStatus(success, '–ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞');
    } catch (e) {
      _showStatus(false, null, '–û—à–∏–±–∫–∞: $e');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  // ===== SYSTEM NOTIFICATIONS =====

  Future<void> _sendSystemUpdate() async {
    setState(() => _isLoading = true);
    
    try {
      final service = context.read<NotificationIntegrationService>();
      final success = await service.notifySystemUpdate(
        userId: 'demo_user_123',
        title: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã',
        body: '–î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
        data: {'version': '2.0.0', 'features': ['–ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏', '–£–ª—É—á—à–µ–Ω–∏—è']},
      );
      
      _showStatus(success, '–°–∏—Å—Ç–µ–º–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
    } catch (e) {
      _showStatus(false, null, '–û—à–∏–±–∫–∞: $e');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  Future<void> _sendMaintenance() async {
    setState(() => _isLoading = true);
    
    try {
      final service = context.read<NotificationIntegrationService>();
      final success = await service.notifyMaintenance(
        userId: 'demo_user_123',
        maintenanceType: '–ü–ª–∞–Ω–æ–≤–æ–µ',
        startTime: DateTime.now().add(const Duration(hours: 1)),
        endTime: DateTime.now().add(const Duration(hours: 3)),
        description: '–ü–ª–∞–Ω–æ–≤–æ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ',
      );
      
      _showStatus(success, '–¢–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è');
    } catch (e) {
      _showStatus(false, null, '–û—à–∏–±–∫–∞: $e');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  Future<void> _sendSecurityAlert() async {
    setState(() => _isLoading = true);
    
    try {
      final service = context.read<NotificationIntegrationService>();
      final success = await service.notifySecurityAlert(
        userId: 'demo_user_123',
        alertType: '–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
        description: '–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ',
        severity: 'medium',
        securityData: {'ip_address': '192.168.1.1', 'location': '–ú–æ—Å–∫–≤–∞'},
      );
      
      _showStatus(success, '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞', '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
    } catch (e) {
      _showStatus(false, null, '–û—à–∏–±–∫–∞: $e');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  // ===== BULK NOTIFICATIONS =====

  Future<void> _sendBulkByCategory() async {
    setState(() => _isLoading = true);
    
    try {
      final service = context.read<NotificationIntegrationService>();
      final success = await service.sendBulkNotificationsByCategory(
        category: 'demo_category',
        title: '–ú–∞—Å—Å–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
        body: '–≠—Ç–æ –º–∞—Å—Å–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏',
        type: 'systemUpdate',
        data: {'demo': true},
      );
      
      _showStatus(success, '–ú–∞—Å—Å–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã', '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–∞—Å—Å–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
    } catch (e) {
      _showStatus(false, null, '–û—à–∏–±–∫–∞: $e');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  Future<void> _sendBulkToUsers() async {
    setState(() => _isLoading = true);
    
    try {
      final service = context.read<NotificationIntegrationService>();
      final success = await service.sendBulkNotificationsToUsers(
        userIds: ['demo_user_1', 'demo_user_2', 'demo_user_3'],
        title: '–ú–∞—Å—Å–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
        body: '–≠—Ç–æ –º–∞—Å—Å–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏',
        type: 'systemUpdate',
        data: {'demo': true},
      );
      
      _showStatus(success, '–ú–∞—Å—Å–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã', '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–∞—Å—Å–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º');
    } catch (e) {
      _showStatus(false, null, '–û—à–∏–±–∫–∞: $e');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  // ===== DEMO AND TESTING =====

  Future<void> _sendDemoNotifications() async {
    setState(() => _isLoading = true);
    
    try {
      final service = context.read<NotificationIntegrationService>();
      final success = await service.sendDemoNotifications(userId: 'demo_user_123');
      
      _showStatus(success, '–î–µ–º–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã', '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ–º–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
    } catch (e) {
      _showStatus(false, null, '–û—à–∏–±–∫–∞: $e');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  Future<void> _simulateModuleEvents() async {
    setState(() => _isLoading = true);
    
    try {
      final service = context.read<NotificationIntegrationService>();
      final success = await service.simulateModuleEvents(userId: 'demo_user_123');
      
      _showStatus(success, '–°–æ–±—ã—Ç–∏—è –º–æ–¥—É–ª–µ–π —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω—ã', '–û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π –º–æ–¥—É–ª–µ–π');
    } catch (e) {
      _showStatus(false, null, '–û—à–∏–±–∫–∞: $e');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  // ===== HELPER METHODS =====

  void _showStatus(bool success, String? successMessage, String errorMessage) {
    setState(() {
      _isSuccess = success;
      _statusMessage = success ? successMessage : errorMessage;
    });
  }
}
