import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../providers/blockchain_loyalty_provider.dart';

class BlockchainLoyaltyScreen extends StatefulWidget {
  const BlockchainLoyaltyScreen({super.key});

  @override
  State<BlockchainLoyaltyScreen> createState() => _BlockchainLoyaltyScreenState();
}

class _BlockchainLoyaltyScreenState extends State<BlockchainLoyaltyScreen>
    with TickerProviderStateMixin {
  late TabController _tabController;
  int _currentUserId = 1; // Mock user ID for demo
  final TextEditingController _walletController = TextEditingController();
  
  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 5, vsync: this);
    WidgetsBinding.instance.addPostFrameCallback((_) {
      final provider = context.read<BlockchainLoyaltyProvider>();
      provider.loadAllUserData(_currentUserId.toString());
    });
  }

  @override
  void dispose() {
    _tabController.dispose();
    _walletController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('üí∞ –ë–ª–æ–∫—á–µ–π–Ω-–õ–æ—è–ª—å–Ω–æ—Å—Ç—å'),
        backgroundColor: Colors.deepPurple,
        foregroundColor: Colors.white,
        elevation: 0,
        bottom: TabBar(
          controller: _tabController,
          tabs: const [
            Tab(icon: Icon(Icons.person), text: '–ü—Ä–æ—Ñ–∏–ª—å'),
            Tab(icon: Icon(Icons.card_giftcard), text: '–ù–∞–≥—Ä–∞–¥—ã'),
            Tab(icon: Icon(Icons.history), text: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏'),
            Tab(icon: Icon(Icons.share), text: '–†–µ—Ñ–µ—Ä–∞–ª—ã'),
            Tab(icon: Icon(Icons.account_balance_wallet), text: '–ö–æ—à–µ–ª–µ–∫'),
          ],
          indicatorColor: Colors.white,
          labelColor: Colors.white,
          unselectedLabelColor: Colors.white70,
        ),
      ),
      body: TabBarView(
        controller: _tabController,
        children: [
          _buildProfileTab(),
          _buildRewardsTab(),
          _buildTransactionsTab(),
          _buildReferralsTab(),
          _buildWalletTab(),
        ],
      ),
    );
  }

  Widget _buildProfileTab() {
    return Consumer<BlockchainLoyaltyProvider>(
      builder: (context, provider, child) {
        if (provider.isLoading) {
          return const Center(child: CircularProgressIndicator());
        }

        final profile = provider.loyaltyProfile;
        final stats = provider.loyaltyStats;
        final currentTier = stats?['currentTier'];
        final nextTier = stats?['nextTier'];
        final progress = stats?['progressToNextTier'] ?? 0.0;

        if (profile == null) {
          return const Center(child: Text('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'));
        }

        return SingleChildScrollView(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              _buildProfileCard(profile, currentTier),
              const SizedBox(height: 16),
              _buildTierProgressCard(currentTier, nextTier, progress),
              const SizedBox(height: 16),
              _buildStatsCard(stats),
              const SizedBox(height: 16),
              _buildAchievementsCard(provider.achievements),
            ],
          ),
        );
      },
    );
  }

  Widget _buildProfileCard(Map<String, dynamic> profile, Map<String, dynamic>? tier) {
    return Card(
      elevation: 4,
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                CircleAvatar(
                  radius: 30,
                  backgroundColor: Colors.deepPurple,
                  child: Text(
                    profile['loyaltyTier']?.toString().toUpperCase().substring(0, 1) ?? 'B',
                    style: const TextStyle(
                      color: Colors.white,
                      fontSize: 24,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
                const SizedBox(width: 16),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        '–£—Ä–æ–≤–µ–Ω—å ${profile['loyaltyTier'] ?? 'Bronze'}',
                        style: const TextStyle(
                          fontSize: 20,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      if (tier != null) ...[
                        const SizedBox(height: 4),
                        Text(
                          '–ú–Ω–æ–∂–∏—Ç–µ–ª—å: ${tier['rewardMultiplier']}x',
                          style: TextStyle(
                            color: Colors.grey[600],
                            fontSize: 14,
                          ),
                        ),
                      ],
                    ],
                  ),
                ),
              ],
            ),
            const SizedBox(height: 16),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceAround,
              children: [
                _buildStatItem(
                  '–ë–∞–ª–ª—ã',
                  provider.formatPoints(profile['loyaltyPoints']?.toInt() ?? 0),
                  Icons.stars,
                  Colors.amber,
                ),
                _buildStatItem(
                  '–ü–æ—Ç—Ä–∞—á–µ–Ω–æ',
                  '${profile['totalSpent']?.toStringAsFixed(0) ?? 0} ‚ÇΩ',
                  Icons.shopping_cart,
                  Colors.green,
                ),
                _buildStatItem(
                  '–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ',
                  provider.formatCryptoAmount(
                    profile['totalRewardsEarned']?.toDouble() ?? 0,
                    'MODUS',
                  ),
                  Icons.monetization_on,
                  Colors.blue,
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildStatItem(String label, String value, IconData icon, Color color) {
    return Column(
      children: [
        Icon(icon, color: color, size: 24),
        const SizedBox(height: 4),
        Text(
          value,
          style: const TextStyle(
            fontSize: 16,
            fontWeight: FontWeight.bold,
          ),
        ),
        Text(
          label,
          style: TextStyle(
            fontSize: 12,
            color: Colors.grey[600],
          ),
        ),
      ],
    );
  }

  Widget _buildTierProgressCard(Map<String, dynamic>? currentTier, Map<String, dynamic>? nextTier, double progress) {
    return Card(
      elevation: 2,
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              '–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è',
              style: const TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 8),
            if (nextTier != null) ...[
              Text(
                '–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å: ${nextTier['tierName']}',
                style: TextStyle(
                  color: Colors.grey[600],
                  fontSize: 14,
                ),
              ),
              const SizedBox(height: 8),
              LinearProgressIndicator(
                value: progress / 100,
                backgroundColor: Colors.grey[300],
                valueColor: const AlwaysStoppedAnimation<Color>(Colors.deepPurple),
              ),
              const SizedBox(height: 8),
              Text(
                '${progress.toStringAsFixed(1)}%',
                style: const TextStyle(
                  fontSize: 12,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ] else ...[
              Text(
                '–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è!',
                style: TextStyle(
                  color: Colors.green[600],
                  fontSize: 14,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ],
          ],
        ),
      ),
    );
  }

  Widget _buildStatsCard(Map<String, dynamic>? stats) {
    if (stats == null) return const SizedBox.shrink();

    return Card(
      elevation: 2,
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
              style: TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 12),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceAround,
              children: [
                _buildStatItem(
                  '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏',
                  '${stats['transactions']?.length ?? 0}',
                  Icons.receipt,
                  Colors.orange,
                ),
                _buildStatItem(
                  '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è',
                  '${stats['achievements']?.length ?? 0}',
                  Icons.emoji_events,
                  Colors.purple,
                ),
                _buildStatItem(
                  '–†–µ—Ñ–µ—Ä–∞–ª—ã',
                  '${stats['referrals']?.length ?? 0}',
                  Icons.people,
                  Colors.teal,
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildAchievementsCard(List<Map<String, dynamic>> achievements) {
    if (achievements.isEmpty) {
      return Card(
        elevation: 2,
        child: const Padding(
          padding: EdgeInsets.all(16),
          child: Center(
            child: Text(
              '–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π',
              style: TextStyle(
                fontSize: 16,
                color: Colors.grey,
              ),
            ),
          ),
        ),
      );
    }

    return Card(
      elevation: 2,
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              '–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è',
              style: TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 12),
            ...achievements.take(3).map((achievement) => ListTile(
              leading: const Icon(Icons.emoji_events, color: Colors.amber),
              title: Text(achievement['achievementName'] ?? ''),
              subtitle: Text(achievement['description'] ?? ''),
              trailing: Text(
                '+${achievement['pointsRewarded']} –±–∞–ª–ª–æ–≤',
                style: const TextStyle(
                  color: Colors.green,
                  fontWeight: FontWeight.bold,
                ),
              ),
            )),
          ],
        ),
      ),
    );
  }

  Widget _buildRewardsTab() {
    return Consumer<BlockchainLoyaltyProvider>(
      builder: (context, provider, child) {
        if (provider.isLoading) {
          return const Center(child: CircularProgressIndicator());
        }

        return SingleChildScrollView(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                '–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã',
                style: Theme.of(context).textTheme.headlineSmall,
              ),
              const SizedBox(height: 16),
              ...provider.rewards.map((reward) => _buildRewardCard(reward, provider)),
              const SizedBox(height: 16),
              _buildDailyLoginCard(provider),
            ],
          ),
        );
      },
    );
  }

  Widget _buildRewardCard(Map<String, dynamic> reward, BlockchainLoyaltyProvider provider) {
    return Card(
      margin: const EdgeInsets.only(bottom: 12),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(
                  reward['rewardType'] ?? '',
                  style: const TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                Container(
                  padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                  decoration: BoxDecoration(
                    color: Colors.deepPurple,
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: Text(
                    '${reward['tokenSymbol']} ${reward['cryptoAmount']}',
                    style: const TextStyle(
                      color: Colors.white,
                      fontSize: 12,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
              ],
            ),
            const SizedBox(height: 8),
            Text(
              '–¢—Ä–µ–±—É–µ—Ç—Å—è –±–∞–ª–ª–æ–≤: ${reward['pointsRequired']}',
              style: TextStyle(
                color: Colors.grey[600],
                fontSize: 14,
              ),
            ),
            if (reward['maxDailyClaims'] != null) ...[
              const SizedBox(height: 4),
              Text(
                '–ú–∞–∫—Å–∏–º—É–º –≤ –¥–µ–Ω—å: ${reward['maxDailyClaims']}',
                style: TextStyle(
                  color: Colors.grey[600],
                  fontSize: 14,
                ),
              ),
            ],
            const SizedBox(height: 12),
            SizedBox(
              width: double.infinity,
              child: ElevatedButton(
                onPressed: () => _showExchangeDialog(reward, provider),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.deepPurple,
                  foregroundColor: Colors.white,
                ),
                child: const Text('–û–±–º–µ–Ω—è—Ç—å –±–∞–ª–ª—ã'),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildDailyLoginCard(BlockchainLoyaltyProvider provider) {
    return Card(
      color: Colors.blue[50],
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(Icons.login, color: Colors.blue[600]),
                const SizedBox(width: 8),
                Text(
                  '–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –≤—Ö–æ–¥',
                  style: TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                    color: Colors.blue[800],
                  ),
                ),
              ],
            ),
            const SizedBox(height: 8),
            Text(
              '–ü–æ–ª—É—á–∞–π—Ç–µ –±–∞–ª–ª—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∑–∞ –≤—Ö–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
              style: TextStyle(
                color: Colors.blue[700],
                fontSize: 14,
              ),
            ),
            const SizedBox(height: 12),
            SizedBox(
              width: double.infinity,
              child: ElevatedButton(
                onPressed: () => provider.awardDailyLoginReward(_currentUserId.toString()),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.blue[600],
                  foregroundColor: Colors.white,
                ),
                child: const Text('–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É'),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildTransactionsTab() {
    return Consumer<BlockchainLoyaltyProvider>(
      builder: (context, provider, child) {
        if (provider.isLoading) {
          return const Center(child: CircularProgressIndicator());
        }

        if (provider.transactions.isEmpty) {
          return const Center(
            child: Text(
              '–ü–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π',
              style: TextStyle(
                fontSize: 16,
                color: Colors.grey,
              ),
            ),
          );
        }

        return ListView.builder(
          padding: const EdgeInsets.all(16),
          itemCount: provider.transactions.length,
          itemBuilder: (context, index) {
            final transaction = provider.transactions[index];
            return _buildTransactionCard(transaction, provider);
          },
        );
      },
    );
  }

  Widget _buildTransactionCard(Map<String, dynamic> transaction, BlockchainLoyaltyProvider provider) {
    final isPositive = transaction['pointsAmount'] > 0;
    final icon = _getTransactionIcon(transaction['transactionType']);
    final color = isPositive ? Colors.green : Colors.red;

    return Card(
      margin: const EdgeInsets.only(bottom: 8),
      child: ListTile(
        leading: CircleAvatar(
          backgroundColor: color.withOpacity(0.1),
          child: Icon(icon, color: color),
        ),
        title: Text(
          transaction['description'] ?? '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è',
          style: const TextStyle(fontWeight: FontWeight.bold),
        ),
        subtitle: Text(
          _formatTransactionDate(transaction['createdAt']),
          style: TextStyle(color: Colors.grey[600]),
        ),
        trailing: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          crossAxisAlignment: CrossAxisAlignment.end,
          children: [
            Text(
              '${isPositive ? '+' : ''}${transaction['pointsAmount']?.toStringAsFixed(0) ?? 0}',
              style: TextStyle(
                color: color,
                fontWeight: FontWeight.bold,
                fontSize: 16,
              ),
            ),
            if (transaction['cryptoAmount'] != null) ...[
              const SizedBox(height: 2),
              Text(
                provider.formatCryptoAmount(
                  transaction['cryptoAmount'].toDouble(),
                  'MODUS',
                ),
                style: TextStyle(
                  color: Colors.blue[600],
                  fontSize: 12,
                ),
              ),
            ],
          ],
        ),
      ),
    );
  }

  IconData _getTransactionIcon(String? type) {
    switch (type) {
      case 'purchase':
        return Icons.shopping_cart;
      case 'referral':
        return Icons.people;
      case 'daily_login':
        return Icons.login;
      case 'achievement':
        return Icons.emoji_events;
      case 'tier_upgrade':
        return Icons.trending_up;
      case 'exchange':
        return Icons.swap_horiz;
      default:
        return Icons.receipt;
    }
  }

  String _formatTransactionDate(dynamic date) {
    if (date == null) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    try {
      final dateTime = DateTime.parse(date.toString());
      return '${dateTime.day}.${dateTime.month}.${dateTime.year} ${dateTime.hour}:${dateTime.minute}';
    } catch (e) {
      return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  }

  Widget _buildReferralsTab() {
    return Consumer<BlockchainLoyaltyProvider>(
      builder: (context, provider, child) {
        if (provider.isLoading) {
          return const Center(child: CircularProgressIndicator());
        }

        return SingleChildScrollView(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              _buildReferralCodeCard(provider),
              const SizedBox(height: 16),
              _buildReferralStatsCard(provider),
              const SizedBox(height: 16),
              _buildReferralListCard(provider),
            ],
          ),
        );
      },
    );
  }

  Widget _buildReferralCodeCard(BlockchainLoyaltyProvider provider) {
    final referralCode = provider.generateReferralCode(_currentUserId.toString());
    
    return Card(
      color: Colors.green[50],
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(Icons.share, color: Colors.green[600]),
                const SizedBox(width: 8),
                const Text(
                  '–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥',
                  style: TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 12),
            Container(
              width: double.infinity,
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(8),
                border: Border.all(color: Colors.green[300]!),
              ),
              child: Row(
                children: [
                  Expanded(
                    child: Text(
                      referralCode,
                      style: const TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                        fontFamily: 'monospace',
                      ),
                    ),
                  ),
                  IconButton(
                    onPressed: () {
                      // TODO: Copy to clipboard
                      ScaffoldMessenger.of(context).showSnackBar(
                        const SnackBar(content: Text('–ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω')),
                      );
                    },
                    icon: const Icon(Icons.copy),
                    color: Colors.green[600],
                  ),
                ],
              ),
            ),
            const SizedBox(height: 8),
            Text(
              '–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–∏–º –∫–æ–¥–æ–º —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∏—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!',
              style: TextStyle(
                color: Colors.green[700],
                fontSize: 14,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildReferralStatsCard(BlockchainLoyaltyProvider provider) {
    final totalReferrals = provider.referrals.length;
    final totalCryptoEarned = provider.referrals.fold<double>(
      0,
      (sum, r) => sum + (r['cryptoRewarded']?.toDouble() ?? 0),
    );

    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
              style: TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 16),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceAround,
              children: [
                _buildStatItem(
                  '–†–µ—Ñ–µ—Ä–∞–ª—ã',
                  totalReferrals.toString(),
                  Icons.people,
                  Colors.blue,
                ),
                _buildStatItem(
                  '–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ',
                  provider.formatCryptoAmount(totalCryptoEarned, 'MODUS'),
                  Icons.monetization_on,
                  Colors.green,
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildReferralListCard(BlockchainLoyaltyProvider provider) {
    if (provider.referrals.isEmpty) {
      return Card(
        child: const Padding(
          padding: EdgeInsets.all(16),
          child: Center(
            child: Text(
              '–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤',
              style: TextStyle(
                fontSize: 16,
                color: Colors.grey,
              ),
            ),
          ),
        ),
      );
    }

    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              '–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã',
              style: TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 12),
            ...provider.referrals.map((referral) => ListTile(
              leading: CircleAvatar(
                backgroundColor: Colors.blue[100],
                child: Text(
                  referral['referredId']?.toString().substring(0, 2).toUpperCase() ?? 'U',
                  style: TextStyle(
                    color: Colors.blue[800],
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
              title: Text('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${referral['referredId']}'),
              subtitle: Text(
                referral['status'] == 'completed' ? '–ó–∞–≤–µ—Ä—à–µ–Ω' : '–í –æ–∂–∏–¥–∞–Ω–∏–∏',
              ),
              trailing: Text(
                '+${referral['cryptoRewarded']} MODUS',
                style: const TextStyle(
                  color: Colors.green,
                  fontWeight: FontWeight.bold,
                ),
              ),
            )),
          ],
        ),
      ),
    );
  }

  Widget _buildWalletTab() {
    return Consumer<BlockchainLoyaltyProvider>(
      builder: (context, provider, child) {
        if (provider.isLoading) {
          return const Center(child: CircularProgressIndicator());
        }

        return SingleChildScrollView(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              _buildWalletInfoCard(provider),
              const SizedBox(height: 16),
              _buildWalletAddressCard(provider),
            ],
          ),
        );
      },
    );
  }

  Widget _buildWalletInfoCard(BlockchainLoyaltyProvider provider) {
    final walletInfo = provider.walletInfo;
    
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(Icons.account_balance_wallet, color: Colors.deepPurple[600]),
                const SizedBox(width: 8),
                const Text(
                  '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—à–µ–ª—å–∫–µ',
                  style: TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 16),
            if (walletInfo != null) ...[
              _buildWalletInfoRow('–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞', walletInfo['walletAddress'] ?? '–ù–µ —É–∫–∞–∑–∞–Ω'),
              const SizedBox(height: 8),
              _buildWalletInfoRow('–ë–∞–ª–ª—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏', 
                provider.formatPoints(walletInfo['loyaltyPoints']?.toInt() ?? 0)),
              const SizedBox(height: 8),
              _buildWalletInfoRow('–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ', 
                provider.formatCryptoAmount(walletInfo['totalRewardsEarned']?.toDouble() ?? 0, 'MODUS')),
            ] else ...[
              const Text(
                '–ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
                style: TextStyle(
                  fontSize: 14,
                  color: Colors.grey,
                ),
              ),
            ],
          ],
        ),
      ),
    );
  }

  Widget _buildWalletInfoRow(String label, String value) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        Text(
          label,
          style: TextStyle(
            color: Colors.grey[600],
            fontSize: 14,
          ),
        ),
        Text(
          value,
          style: const TextStyle(
            fontSize: 14,
            fontWeight: FontWeight.bold,
          ),
        ),
      ],
    );
  }

  Widget _buildWalletAddressCard(BlockchainLoyaltyProvider provider) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—à–µ–ª—å–∫–∞',
              style: TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 12),
            TextField(
              controller: _walletController,
              decoration: const InputDecoration(
                labelText: '–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞',
                hintText: '0x...',
                border: OutlineInputBorder(),
              ),
            ),
            const SizedBox(height: 12),
            SizedBox(
              width: double.infinity,
              child: ElevatedButton(
                onPressed: () {
                  if (_walletController.text.isNotEmpty) {
                    provider.updateWalletAddress(
                      userId: _currentUserId.toString(),
                      walletAddress: _walletController.text,
                    );
                    _walletController.clear();
                  }
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.deepPurple,
                  foregroundColor: Colors.white,
                ),
                child: const Text('–û–±–Ω–æ–≤–∏—Ç—å –∞–¥—Ä–µ—Å'),
              ),
            ),
            const SizedBox(height: 8),
            Text(
              '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ Ethereum-–∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ-–Ω–∞–≥—Ä–∞–¥',
              style: TextStyle(
                color: Colors.grey[600],
                fontSize: 12,
              ),
            ),
          ],
        ),
      ),
    );
  }

  void _showExchangeDialog(Map<String, dynamic> reward, BlockchainLoyaltyProvider provider) {
    final pointsController = TextEditingController();
    final currentProfile = provider.loyaltyProfile;
    
    if (currentProfile == null) return;

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('–û–±–º–µ–Ω –±–∞–ª–ª–æ–≤ –Ω–∞ ${reward['tokenSymbol']}'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text('–î–æ—Å—Ç—É–ø–Ω–æ –±–∞–ª–ª–æ–≤: ${currentProfile['loyaltyPoints']?.toStringAsFixed(0) ?? 0}'),
            const SizedBox(height: 16),
            TextField(
              controller: pointsController,
              decoration: const InputDecoration(
                labelText: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –æ–±–º–µ–Ω–∞',
                border: OutlineInputBorder(),
              ),
              keyboardType: TextInputType.number,
            ),
            const SizedBox(height: 8),
            Text(
              '–í—ã –ø–æ–ª—É—á–∏—Ç–µ: ${_calculateCryptoAmount(reward, pointsController.text)} ${reward['tokenSymbol']}',
              style: const TextStyle(
                fontWeight: FontWeight.bold,
                color: Colors.green,
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('–û—Ç–º–µ–Ω–∞'),
          ),
          ElevatedButton(
            onPressed: () async {
              final points = int.tryParse(pointsController.text);
              if (points != null && points > 0) {
                Navigator.of(context).pop();
                final result = await provider.exchangePointsForCrypto(
                  userId: _currentUserId.toString(),
                  pointsAmount: points,
                  rewardType: reward['rewardType'],
                );
                
                if (result['success'] == true) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                      content: Text(result['message'] ?? '–û–±–º–µ–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ'),
                      backgroundColor: Colors.green,
                    ),
                  );
                } else {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                      content: Text(result['error'] ?? '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–º–µ–Ω–µ'),
                      backgroundColor: Colors.red,
                    ),
                  );
                }
              }
            },
            child: const Text('–û–±–º–µ–Ω—è—Ç—å'),
          ),
        ],
      ),
    );
  }

  String _calculateCryptoAmount(Map<String, dynamic> reward, String pointsText) {
    final points = int.tryParse(pointsText);
    if (points == null) return '0';
    
    final rewardAmount = reward['cryptoAmount']?.toDouble() ?? 0;
    final requiredPoints = reward['pointsRequired']?.toInt() ?? 1;
    
    return ((points / requiredPoints) * rewardAmount).toStringAsFixed(4);
  }
}
