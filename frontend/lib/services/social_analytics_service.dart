import 'dart:convert';
import 'package:http/http.dart' as http;

class SocialAnalyticsService {
  static const String baseUrl = 'http://localhost:8080/api/social-analytics';
  
  /// –ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–Ω–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  Future<Map<String, dynamic>> getCategoryTrends({
    String period = 'month',
    int limit = 10,
  }) async {
    try {
      final response = await http.get(
        Uri.parse('$baseUrl/trends?period=$period&limit=$limit'),
        headers: {'Content-Type': 'application/json'},
      );

      if (response.statusCode == 200) {
        return jsonDecode(response.body);
      } else {
        throw Exception('Failed to get category trends: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('Error getting category trends: $e');
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
  Future<Map<String, dynamic>> getSocialMetrics({
    required String productId,
    String? period,
  }) async {
    try {
      final uri = period != null 
          ? Uri.parse('$baseUrl/social-metrics/$productId?period=$period')
          : Uri.parse('$baseUrl/social-metrics/$productId');
      
      final response = await http.get(
        uri,
        headers: {'Content-Type': 'application/json'},
      );

      if (response.statusCode == 200) {
        return jsonDecode(response.body);
      } else {
        throw Exception('Failed to get social metrics: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('Error getting social metrics: $e');
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –∞—É–¥–∏—Ç–æ—Ä–∏–∏
  Future<Map<String, dynamic>> getAudienceAnalysis({
    required String category,
    String? period,
  }) async {
    try {
      final uri = period != null 
          ? Uri.parse('$baseUrl/audience/$category?period=$period')
          : Uri.parse('$baseUrl/audience/$category');
      
      final response = await http.get(
        uri,
        headers: {'Content-Type': 'application/json'},
      );

      if (response.statusCode == 200) {
        return jsonDecode(response.body);
      } else {
        throw Exception('Failed to get audience analysis: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('Error getting audience analysis: $e');
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã —Ç—Ä–µ–Ω–¥–æ–≤
  Future<Map<String, dynamic>> getTrendPredictions({
    required String category,
    int daysAhead = 30,
  }) async {
    try {
      final response = await http.get(
        Uri.parse('$baseUrl/predictions/$category?daysAhead=$daysAhead'),
        headers: {'Content-Type': 'application/json'},
      );

      if (response.statusCode == 200) {
        return jsonDecode(response.body);
      } else {
        throw Exception('Failed to get trend predictions: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('Error getting trend predictions: $e');
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
  Future<Map<String, dynamic>> getCompetitorAnalysis({
    required String category,
    int limit = 5,
  }) async {
    try {
      final response = await http.get(
        Uri.parse('$baseUrl/competitors/$category?limit=$limit'),
        headers: {'Content-Type': 'application/json'},
      );

      if (response.statusCode == 200) {
        return jsonDecode(response.body);
      } else {
        throw Exception('Failed to get competitor analysis: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('Error getting competitor analysis: $e');
    }
  }

  /// –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç
  Future<Map<String, dynamic>> generateReport({
    required String reportType,
    Map<String, dynamic>? parameters,
  }) async {
    try {
      final response = await http.post(
        Uri.parse('$baseUrl/reports'),
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({
          'reportType': reportType,
          'parameters': parameters,
        }),
      );

      if (response.statusCode == 200) {
        return jsonDecode(response.body);
      } else {
        throw Exception('Failed to generate report: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('Error generating report: $e');
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –æ—Ç—á–µ—Ç–æ–≤
  Future<Map<String, dynamic>> getReportTypes() async {
    try {
      final response = await http.get(
        Uri.parse('$baseUrl/report-types'),
        headers: {'Content-Type': 'application/json'},
      );

      if (response.statusCode == 200) {
        return jsonDecode(response.body);
      } else {
        throw Exception('Failed to get report types: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('Error getting report types: $e');
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
  Future<Map<String, dynamic>> getPeriodStats(String period) async {
    try {
      final response = await http.get(
        Uri.parse('$baseUrl/stats/$period'),
        headers: {'Content-Type': 'application/json'},
      );

      if (response.statusCode == 200) {
        return jsonDecode(response.body);
      } else {
        throw Exception('Failed to get period stats: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('Error getting period stats: $e');
    }
  }

  /// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
  Future<String> exportAnalyticsData({
    required String dataType,
    String format = 'json',
    String period = 'month',
  }) async {
    try {
      final response = await http.get(
        Uri.parse('$baseUrl/export/$dataType?format=$format&period=$period'),
        headers: {'Content-Type': 'application/json'},
      );

      if (response.statusCode == 200) {
        return response.body;
      } else {
        throw Exception('Failed to export analytics data: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('Error exporting analytics data: $e');
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  Future<Map<String, dynamic>> getTopProducts({
    required String category,
    int limit = 10,
    String sortBy = 'sales',
  }) async {
    try {
      final response = await http.get(
        Uri.parse('$baseUrl/top-products/$category?limit=$limit&sortBy=$sortBy'),
        headers: {'Content-Type': 'application/json'},
      );

      if (response.statusCode == 200) {
        return jsonDecode(response.body);
      } else {
        throw Exception('Failed to get top products: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('Error getting top products: $e');
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏
  Future<Map<String, dynamic>> getSeasonalityAnalysis(String category) async {
    try {
      final response = await http.get(
        Uri.parse('$baseUrl/seasonality/$category'),
        headers: {'Content-Type': 'application/json'},
      );

      if (response.statusCode == 200) {
        return jsonDecode(response.body);
      } else {
        throw Exception('Failed to get seasonality analysis: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('Error getting seasonality analysis: $e');
    }
  }

  /// –°—Ä–∞–≤–Ω–∏—Ç—å –ø–µ—Ä–∏–æ–¥—ã
  Future<Map<String, dynamic>> comparePeriods({
    required String period1,
    required String period2,
    List<String>? metrics,
  }) async {
    try {
      final response = await http.post(
        Uri.parse('$baseUrl/compare-periods'),
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({
          'period1': period1,
          'period2': period2,
          'metrics': metrics ?? ['sales', 'views', 'rating'],
        }),
      );

      if (response.statusCode == 200) {
        return jsonDecode(response.body);
      } else {
        throw Exception('Failed to compare periods: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('Error comparing periods: $e');
    }
  }

  // Utility methods

  /// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
  String formatPercentageChange(double change) {
    final sign = change >= 0 ? '+' : '';
    return '$sign${(change * 100).toStringAsFixed(1)}%';
  }

  /// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–¥
  String formatTrend(String trend) {
    switch (trend.toLowerCase()) {
      case 'rising':
        return 'üìà –†–∞—Å—Ç–µ—Ç';
      case 'falling':
        return 'üìâ –ü–∞–¥–∞–µ—Ç';
      case 'stable':
        return '‚û°Ô∏è –°—Ç–∞–±–∏–ª—å–Ω–æ';
      case 'up':
        return 'üìà –í–≤–µ—Ä—Ö';
      case 'down':
        return 'üìâ –í–Ω–∏–∑';
      default:
        return '‚û°Ô∏è $trend';
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è —Ç—Ä–µ–Ω–¥–∞
  int getTrendColor(String trend) {
    switch (trend.toLowerCase()) {
      case 'rising':
      case 'up':
        return 0xFF4CAF50; // –ó–µ–ª–µ–Ω—ã–π
      case 'falling':
      case 'down':
        return 0xFFF44336; // –ö—Ä–∞—Å–Ω—ã–π
      case 'stable':
        return 0xFF2196F3; // –°–∏–Ω–∏–π
      default:
        return 0xFF9E9E9E; // –°–µ—Ä—ã–π
    }
  }

  /// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
  String formatNumber(num number) {
    if (number >= 1000000) {
      return '${(number / 1000000).toStringAsFixed(1)}M';
    } else if (number >= 1000) {
      return '${(number / 1000).toStringAsFixed(1)}K';
    } else {
      return number.toString();
    }
  }

  /// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥
  String formatRating(double rating) {
    return rating.toStringAsFixed(1);
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  String getCategoryIcon(String category) {
    switch (category.toLowerCase()) {
      case 'electronics':
      case '—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞':
        return 'üì±';
      case 'fashion':
      case '–º–æ–¥–∞':
      case '–æ–¥–µ–∂–¥–∞':
        return 'üëó';
      case 'home':
      case '–¥–æ–º':
      case '–±—ã—Ç':
        return 'üè†';
      case 'sports':
      case '—Å–ø–æ—Ä—Ç':
        return '‚öΩ';
      case 'beauty':
      case '–∫—Ä–∞—Å–æ—Ç–∞':
        return 'üíÑ';
      case 'books':
      case '–∫–Ω–∏–≥–∏':
        return 'üìö';
      case 'food':
      case '–µ–¥–∞':
        return 'üçï';
      case 'automotive':
      case '–∞–≤—Ç–æ':
        return 'üöó';
      default:
        return 'üì¶';
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
  List<Map<String, dynamic>> getAvailablePeriods() {
    return [
      {'value': 'day', 'label': '–î–µ–Ω—å', 'icon': 'üìÖ'},
      {'value': 'week', 'label': '–ù–µ–¥–µ–ª—è', 'icon': 'üìÜ'},
      {'value': 'month', 'label': '–ú–µ—Å—è—Ü', 'icon': 'üóìÔ∏è'},
      {'value': 'year', 'label': '–ì–æ–¥', 'icon': 'üìä'},
    ];
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  List<Map<String, dynamic>> getAvailableMetrics() {
    return [
      {'value': 'sales', 'label': '–ü—Ä–æ–¥–∞–∂–∏', 'icon': 'üí∞'},
      {'value': 'views', 'label': '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã', 'icon': 'üëÅÔ∏è'},
      {'value': 'rating', 'label': '–†–µ–π—Ç–∏–Ω–≥', 'icon': '‚≠ê'},
      {'value': 'revenue', 'label': '–î–æ—Ö–æ–¥', 'icon': 'üíµ'},
      {'value': 'orders', 'label': '–ó–∞–∫–∞–∑—ã', 'icon': 'üì¶'},
    ];
  }
}
