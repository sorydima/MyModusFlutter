#!/bin/bash

# MyModus Test Runner Script
# –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è Flutter –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    if ! command -v flutter &> /dev/null; then
        log_error "Flutter –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Flutter SDK."
        exit 1
    fi
    
    if ! command -v dart &> /dev/null; then
        log_error "Dart –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Dart SDK."
        exit 1
    fi
    
    log_success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
clean_project() {
    log_info "–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞..."
    
    flutter clean
    flutter pub get
    
    log_success "–ü—Ä–æ–µ–∫—Ç –æ—á–∏—â–µ–Ω"
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∫–æ–≤
generate_mocks() {
    log_info "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–æ–≤..."
    
    if [ -f "test/widget_tests.mocks.dart" ]; then
        rm test/widget_tests.mocks.dart
    fi
    
    if [ -f "test/integration_tests.mocks.dart" ]; then
        rm test/integration_tests.mocks.dart
    fi
    
    flutter packages pub run build_runner build --delete-conflicting-outputs
    
    log_success "–ú–æ–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã"
}

# –ó–∞–ø—É—Å–∫ unit —Ç–µ—Å—Ç–æ–≤
run_unit_tests() {
    log_info "–ó–∞–ø—É—Å–∫ unit —Ç–µ—Å—Ç–æ–≤..."
    
    if [ -d "test/unit" ]; then
        flutter test test/unit/ --reporter=expanded
        log_success "Unit —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã"
    else
        log_warning "–ü–∞–ø–∫–∞ unit —Ç–µ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    fi
}

# –ó–∞–ø—É—Å–∫ widget —Ç–µ—Å—Ç–æ–≤
run_widget_tests() {
    log_info "–ó–∞–ø—É—Å–∫ widget —Ç–µ—Å—Ç–æ–≤..."
    
    if [ -f "test/widget_tests.dart" ]; then
        flutter test test/widget_tests.dart --reporter=expanded
        log_success "Widget —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã"
    else
        log_warning "–§–∞–π–ª widget —Ç–µ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

# –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
run_integration_tests() {
    log_info "–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤..."
    
    if [ -f "test/integration_tests.dart" ]; then
        flutter test test/integration_tests.dart --reporter=expanded
        log_success "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã"
    else
        log_warning "–§–∞–π–ª –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

# –ó–∞–ø—É—Å–∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
run_platform_tests() {
    log_info "–ó–∞–ø—É—Å–∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤..."
    
    if [ -f "test/platform_tests.dart" ]; then
        flutter test test/platform_tests.dart --reporter=expanded
        log_success "–ü–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã"
    else
        log_warning "–§–∞–π–ª –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

# –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
run_all_tests() {
    log_info "–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤..."
    
    # –°–Ω–∞—á–∞–ª–∞ unit —Ç–µ—Å—Ç—ã
    run_unit_tests
    
    # –ó–∞—Ç–µ–º widget —Ç–µ—Å—Ç—ã
    run_widget_tests
    
    # –ó–∞—Ç–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    run_integration_tests
    
    # –ò –Ω–∞–∫–æ–Ω–µ—Ü –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    run_platform_tests
    
    log_success "–í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!"
}

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º
run_tests_with_coverage() {
    log_info "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º..."
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    mkdir -p coverage
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º
    flutter test --coverage --reporter=expanded
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –æ—Ç—á–µ—Ç
    if command -v genhtml &> /dev/null; then
        genhtml coverage/lcov.info -o coverage/html
        log_success "HTML –æ—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –≤ coverage/html/"
    else
        log_warning "genhtml –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ lcov –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML –æ—Ç—á–µ—Ç–æ–≤."
    fi
    
    log_success "–¢–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω—ã"
}

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤ watch —Ä–µ–∂–∏–º–µ
run_tests_watch() {
    log_info "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤ watch —Ä–µ–∂–∏–º–µ..."
    
    flutter test --watch --reporter=expanded
}

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
run_platform_specific_tests() {
    local platform=$1
    
    case $platform in
        "android")
            log_info "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è Android..."
            flutter test --platform=android --reporter=expanded
            ;;
        "ios")
            log_info "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è iOS..."
            flutter test --platform=ios --reporter=expanded
            ;;
        "web")
            log_info "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è Web..."
            flutter test --platform=web --reporter=expanded
            ;;
        *)
            log_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: $platform"
            log_info "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: android, ios, web"
            exit 1
            ;;
    esac
    
    log_success "–¢–µ—Å—Ç—ã –¥–ª—è $platform –∑–∞–≤–µ—Ä—à–µ–Ω—ã"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
run_code_analysis() {
    log_info "–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞..."
    
    # –ê–Ω–∞–ª–∏–∑ Dart –∫–æ–¥–∞
    flutter analyze
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    flutter format --dry-run .
    
    log_success "–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    local command=${1:-"all"}
    
    log_info "üöÄ MyModus Test Runner"
    log_info "–ö–æ–º–∞–Ω–¥–∞: $command"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    check_dependencies
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–æ–µ–∫—Ç
    clean_project
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–æ–∫–∏
    generate_mocks
    
    case $command in
        "unit")
            run_unit_tests
            ;;
        "widget")
            run_widget_tests
            ;;
        "integration")
            run_integration_tests
            ;;
        "platform")
            run_platform_tests
            ;;
        "coverage")
            run_tests_with_coverage
            ;;
        "watch")
            run_tests_watch
            ;;
        "android"|"ios"|"web")
            run_platform_specific_tests $command
            ;;
        "analyze")
            run_code_analysis
            ;;
        "all")
            run_all_tests
            ;;
        "help"|"-h"|"--help")
            show_help
            ;;
        *)
            log_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $command"
            show_help
            exit 1
            ;;
    esac
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
show_help() {
    echo "MyModus Test Runner - –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"
    echo ""
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–∫–æ–º–∞–Ω–¥–∞]"
    echo ""
    echo "–ö–æ–º–∞–Ω–¥—ã:"
    echo "  all          - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
    echo "  unit         - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ unit —Ç–µ—Å—Ç—ã"
    echo "  widget       - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ widget —Ç–µ—Å—Ç—ã"
    echo "  integration  - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"
    echo "  platform     - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"
    echo "  coverage     - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º"
    echo "  watch        - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –≤ watch —Ä–µ–∂–∏–º–µ"
    echo "  android      - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –¥–ª—è Android"
    echo "  ios          - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –¥–ª—è iOS"
    echo "  web          - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –¥–ª—è Web"
    echo "  analyze      - –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞"
    echo "  help         - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0                    # –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã"
    echo "  $0 widget            # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ widget —Ç–µ—Å—Ç—ã"
    echo "  $0 coverage          # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º"
    echo "  $0 android           # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –¥–ª—è Android"
}

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main "$@"
