const { ethers } = require("hardhat");

async function main() {
  console.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ MyModus...");
  
  // –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –¥–µ–ø–ª–æ—è
  const [deployer] = await ethers.getSigners();
  console.log(`üìù –î–µ–ø–ª–æ–π —Å –∞–∫–∫–∞—É–Ω—Ç–∞: ${deployer.address}`);
  console.log(`üí∞ –ë–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞: ${ethers.formatEther(await deployer.provider.getBalance(deployer.address))} ETH`);
  
  // –î–µ–ø–ª–æ–π NFT –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
  console.log("\nüé® –î–µ–ø–ª–æ–π NFT –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞...");
  const MyModusNFT = await ethers.getContractFactory("MyModusNFT");
  const nftContract = await MyModusNFT.deploy();
  await nftContract.waitForDeployment();
  
  const nftAddress = await nftContract.getAddress();
  console.log(`‚úÖ NFT –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –ø–æ –∞–¥—Ä–µ—Å—É: ${nftAddress}`);
  
  // –î–µ–ø–ª–æ–π —Ç–æ–∫–µ–Ω–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
  console.log("\nü™ô –î–µ–ø–ª–æ–π —Ç–æ–∫–µ–Ω–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏...");
  const MyModusLoyalty = await ethers.getContractFactory("MyModusLoyalty");
  const loyaltyContract = await MyModusLoyalty.deploy(
    "MyModus Loyalty Token", // –ù–∞–∑–≤–∞–Ω–∏–µ
    "MMLT",                   // –°–∏–º–≤–æ–ª
    18,                       // –î–µ—Å—è—Ç–∏—á–Ω—ã–µ –∑–Ω–∞–∫–∏
    ethers.parseEther("1000000"), // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: 1M —Ç–æ–∫–µ–Ω–æ–≤
    ethers.parseEther("0.001")   // –¶–µ–Ω–∞ –º–∏–Ω—Ç–∏–Ω–≥–∞: 0.001 ETH –∑–∞ —Ç–æ–∫–µ–Ω
  );
  await loyaltyContract.waitForDeployment();
  
  const loyaltyAddress = await loyaltyContract.getAddress();
  console.log(`‚úÖ –¢–æ–∫–µ–Ω –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –ø–æ –∞–¥—Ä–µ—Å—É: ${loyaltyAddress}`);
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö
  console.log("\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞—Ö:");
  
  const nftName = await nftContract.name();
  const nftSymbol = await nftContract.symbol();
  console.log(`üé® NFT: ${nftName} (${nftSymbol})`);
  
  const loyaltyName = await loyaltyContract.name();
  const loyaltySymbol = await loyaltyContract.symbol();
  const loyaltyDecimals = await loyaltyContract.decimals();
  const loyaltyMaxSupply = await loyaltyContract.maxSupply();
  const loyaltyMintPrice = await loyaltyContract.mintPrice();
  
  console.log(`ü™ô –¢–æ–∫–µ–Ω –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏: ${loyaltyName} (${loyaltySymbol})`);
  console.log(`   –î–µ—Å—è—Ç–∏—á–Ω—ã–µ –∑–Ω–∞–∫–∏: ${loyaltyDecimals}`);
  console.log(`   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: ${ethers.formatEther(loyaltyMaxSupply)} ${loyaltySymbol}`);
  console.log(`   –¶–µ–Ω–∞ –º–∏–Ω—Ç–∏–Ω–≥–∞: ${ethers.formatEther(loyaltyMintPrice)} ETH`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
  console.log("\nüîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞:");
  
  const nftOwner = await nftContract.owner();
  const loyaltyOwner = await loyaltyContract.owner();
  
  console.log(`NFT –≤–ª–∞–¥–µ–ª–µ—Ü: ${nftOwner}`);
  console.log(`–¢–æ–∫–µ–Ω –≤–ª–∞–¥–µ–ª–µ—Ü: ${loyaltyOwner}`);
  console.log(`–î–µ–ø–ª–æ–π—â–∏–∫: ${deployer.address}`);
  
  if (nftOwner === deployer.address && loyaltyOwner === deployer.address) {
    console.log("‚úÖ –ü—Ä–∞–≤–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã");
  } else {
    console.log("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–∞–≤–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω—Ç–µ—Ä–æ–≤ –∏ –±—ë—Ä–Ω–µ—Ä–æ–≤
  const isNFTMinter = await nftContract.isMinter(deployer.address);
  const isLoyaltyMinter = await loyaltyContract.isMinter(deployer.address);
  const isLoyaltyBurner = await loyaltyContract.isBurner(deployer.address);
  
  console.log(`\nüîë –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞:`);
  console.log(`NFT –º–∏–Ω—Ç–µ—Ä: ${isNFTMinter ? "‚úÖ" : "‚ùå"}`);
  console.log(`–¢–æ–∫–µ–Ω –º–∏–Ω—Ç–µ—Ä: ${isLoyaltyMinter ? "‚úÖ" : "‚ùå"}`);
  console.log(`–¢–æ–∫–µ–Ω –±—ë—Ä–Ω–µ—Ä: ${isLoyaltyBurner ? "‚úÖ" : "‚ùå"}`);
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
  console.log("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏...");
  
  try {
    // –¢–µ—Å—Ç –º–∏–Ω—Ç–∏–Ω–≥–∞ NFT
    console.log("–¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∏–Ω—Ç–∏–Ω–≥ NFT...");
    const testTokenURI = "ipfs://QmTestNFTMetadata";
    const testName = "Test NFT";
    const testDescription = "Test NFT description";
    const testImageURI = "ipfs://QmTestImage";
    const testCategory = "Test";
    
    const mintTx = await nftContract.mintNFT(
      deployer.address,
      testTokenURI,
      testName,
      testDescription,
      testImageURI,
      testCategory
    );
    
    await mintTx.wait();
    console.log("‚úÖ NFT —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–∏–Ω—á–µ–Ω");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    const metadata = await nftContract.getNFTMetadata(1);
    console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${metadata.name}`);
    console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${metadata.description}`);
    console.log(`   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${metadata.category}`);
    
    // –¢–µ—Å—Ç –º–∏–Ω—Ç–∏–Ω–≥–∞ —Ç–æ–∫–µ–Ω–æ–≤ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
    console.log("\n–¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∏–Ω—Ç–∏–Ω–≥ —Ç–æ–∫–µ–Ω–æ–≤ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏...");
    const testAmount = ethers.parseEther("100");
    
    const mintLoyaltyTx = await loyaltyContract.mint(deployer.address, testAmount);
    await mintLoyaltyTx.wait();
    
    console.log("‚úÖ –¢–æ–∫–µ–Ω—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–∏–Ω—á–µ–Ω—ã");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    const balance = await loyaltyContract.balanceOf(deployer.address);
    console.log(`   –ë–∞–ª–∞–Ω—Å: ${ethers.formatEther(balance)} ${loyaltySymbol}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const nftStats = await nftContract.getStats();
    const loyaltyStats = await loyaltyContract.getStats();
    
    console.log("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤:");
    console.log(`NFT:`);
    console.log(`   –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: ${nftStats.totalNFTs}`);
    console.log(`   –°–æ–∑–¥–∞—Ç–µ–ª–µ–π: ${nftStats.totalCreators}`);
    console.log(`   –ù–∞ –ø—Ä–æ–¥–∞–∂–µ: ${nftStats.nftsForSale}`);
    
    console.log(`–¢–æ–∫–µ–Ω –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏:`);
    console.log(`   –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${loyaltyStats.totalUsers}`);
    console.log(`   –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${loyaltyStats.activeUsers}`);
    console.log(`   –ú–∏–Ω—Ç–µ—Ä–æ–≤: ${loyaltyStats.totalMinters}`);
    console.log(`   –ë—ë—Ä–Ω–µ—Ä–æ–≤: ${loyaltyStats.totalBurners}`);
    
  } catch (error) {
    console.log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:", error.message);
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
  console.log("\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤...");
  
  const contractAddresses = {
    network: network.name,
    nftContract: nftAddress,
    loyaltyContract: loyaltyAddress,
    deployer: deployer.address,
    deploymentTime: new Date().toISOString()
  };
  
  // –í—ã–≤–æ–¥–∏–º –∞–¥—Ä–µ—Å–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
  console.log("\nüìã –ê–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:");
  console.log(`NFT_CONTRACT_ADDRESS=${nftAddress}`);
  console.log(`LOYALTY_CONTRACT_ADDRESS=${loyaltyAddress}`);
  console.log(`DEPLOYER_ADDRESS=${deployer.address}`);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
  const fs = require('fs');
  const path = require('path');
  
  const addressesPath = path.join(__dirname, '..', 'deployed-addresses.json');
  fs.writeFileSync(addressesPath, JSON.stringify(contractAddresses, null, 2));
  
  console.log(`\nüíæ –ê–¥—Ä–µ—Å–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: ${addressesPath}`);
  
  console.log("\nüéâ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!");
  console.log("\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:");
  console.log("1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –≤ .env —Ñ–∞–π–ª");
  console.log("2. –û–±–Ω–æ–≤–∏—Ç–µ ABI –≤ frontend");
  console.log("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å");
  console.log("4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤");
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–ø–ª–æ–µ:", error);
    process.exit(1);
  });
