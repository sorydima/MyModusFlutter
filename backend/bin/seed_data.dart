import 'dart:convert';
import 'dart:io';
import 'package:postgres/postgres.dart';
import 'package:dotenv/dotenv.dart';

void main() async {
  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  DotEnv()..load();
  
  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  final uri = DotEnv().env['DATABASE_URL'] ?? 'postgres://mymodus:mymodus123@localhost:5432/mymodus';
  final uriObj = Uri.parse(uri);
  
  final connection = PostgreSQLConnection(
    uriObj.host,
    uriObj.port,
    uriObj.path.replaceFirst('/', ''),
    username: uriObj.userInfo.split(':').first,
    password: uriObj.userInfo.split(':').last,
    useSSL: false,
  );
  
  try {
    await connection.open();
    print('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    await _createCategories(connection);
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    await _createProducts(connection);
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await _createTestUser(connection);
    
    print('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!');
    
  } catch (e) {
    print('‚ùå –û—à–∏–±–∫–∞: $e');
  } finally {
    await connection.close();
  }
}

Future<void> _createCategories(PostgreSQLConnection connection) async {
  print('üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
  
  final categories = [
    {
      'name': '–û–±—É–≤—å',
      'description': '–ö—Ä–æ—Å—Å–æ–≤–∫–∏, —Ç—É—Ñ–ª–∏, –±–æ—Ç–∏–Ω–∫–∏',
      'icon': 'üëü',
    },
    {
      'name': '–û–¥–µ–∂–¥–∞',
      'description': '–§—É—Ç–±–æ–ª–∫–∏, –¥–∂–∏–Ω—Å—ã, –∫—É—Ä—Ç–∫–∏',
      'icon': 'üëï',
    },
    {
      'name': '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã',
      'description': '–°—É–º–∫–∏, —Ä–µ–º–Ω–∏, —É–∫—Ä–∞—à–µ–Ω–∏—è',
      'icon': 'üëú',
    },
  ];
  
  for (final category in categories) {
    await connection.execute(
      '''
      INSERT INTO categories (name, description, icon)
      VALUES (@name, @description, @icon)
      ON CONFLICT (name) DO NOTHING
      ''',
      substitutionValues: {
        'name': category['name'],
        'description': category['description'],
        'icon': category['icon'],
      },
    );
  }
  
  print('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã');
}

Future<void> _createProducts(PostgreSQLConnection connection) async {
  print('üõçÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤...');
  
  // –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  final categoriesResult = await connection.query('SELECT id, name FROM categories ORDER BY name');
  if (categoriesResult.isEmpty) {
    print('‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.');
    return;
  }
  
  final Map<String, String> categoryNameToId = {
    for (var row in categoriesResult) row[1] as String: row[0].toString()
  };

  final footwearId = categoryNameToId['–û–±—É–≤—å'];
  final clothingId = categoryNameToId['–û–¥–µ–∂–¥–∞'];
  final accessoriesId = categoryNameToId['–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã'];

  final products = [
    {
      'title': 'Nike Air Max 270',
      'description': '–°—Ç–∏–ª—å–Ω—ã–µ –∫—Ä–æ—Å—Å–æ–≤–∫–∏ –¥–ª—è —Å–ø–æ—Ä—Ç–∞ –∏ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Å–∫–∏',
      'price': 12990,
      'old_price': 15990,
      'discount': 19,
      'image_url': 'https://via.placeholder.com/400x400/FF6B6B/FFFFFF?text=Nike+Air+Max+270',
      'product_url': 'https://example.com/nike-air-max-270',
      'brand': 'Nike',
      'category_id': footwearId, // –û–±—É–≤—å
      'sku': 'NIKE-AM270-001',
      'specifications': jsonEncode({
        'material': 'Mesh',
        'sole': 'Rubber',
        'weight': '300g',
      }),
      'stock': 15,
      'rating': 4.8,
      'review_count': 127,
      'source': 'test',
      'source_id': 'nike-am270-001',
    },
    {
      'title': 'Adidas Ultraboost 22',
      'description': '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –±–µ–≥–æ–≤—ã–µ –∫—Ä–æ—Å—Å–æ–≤–∫–∏ —Å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–µ–π Boost',
      'price': 18990,
      'old_price': null,
      'discount': null,
      'image_url': 'https://via.placeholder.com/400x400/4ECDC4/FFFFFF?text=Adidas+Ultraboost+22',
      'product_url': 'https://example.com/adidas-ultraboost-22',
      'brand': 'Adidas',
      'category_id': footwearId, // –û–±—É–≤—å
      'sku': 'ADIDAS-UB22-001',
      'specifications': jsonEncode({
        'material': 'Primeknit',
        'sole': 'Continental Rubber',
        'weight': '280g',
      }),
      'stock': 8,
      'rating': 4.9,
      'review_count': 89,
      'source': 'test',
      'source_id': 'adidas-ub22-001',
    },
    {
      'title': 'Levi\'s 501 Original Jeans',
      'description': '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –¥–∂–∏–Ω—Å—ã –ø—Ä—è–º–æ–≥–æ –∫—Ä–æ—è',
      'price': 7990,
      'old_price': 9990,
      'discount': 20,
      'image_url': 'https://via.placeholder.com/400x400/45B7D1/FFFFFF?text=Levis+501+Jeans',
      'product_url': 'https://example.com/levis-501-jeans',
      'brand': 'Levi\'s',
      'category_id': clothingId, // –û–¥–µ–∂–¥–∞
      'sku': 'LEVIS-501-001',
      'specifications': jsonEncode({
        'material': '100% Cotton',
        'fit': 'Straight',
        'rise': 'Mid-rise',
      }),
      'stock': 25,
      'rating': 4.6,
      'review_count': 203,
      'source': 'test',
      'source_id': 'levis-501-001',
    },
    {
      'title': 'Apple Watch Series 8',
      'description': '–£–º–Ω—ã–µ —á–∞—Å—ã —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è –∏ —Ñ–∏—Ç–Ω–µ—Å–∞',
      'price': 45990,
      'old_price': 49990,
      'discount': 8,
      'image_url': 'https://via.placeholder.com/400x400/96CEB4/FFFFFF?text=Apple+Watch+Series+8',
      'product_url': 'https://example.com/apple-watch-series-8',
      'brand': 'Apple',
      'category_id': accessoriesId, // –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã
      'sku': 'APPLE-WATCH8-001',
      'specifications': jsonEncode({
        'display': 'Always-On Retina',
        'battery': '18 hours',
        'water_resistance': '50m',
      }),
      'stock': 12,
      'rating': 4.7,
      'review_count': 156,
      'source': 'test',
      'source_id': 'apple-watch8-001',
    },
  ];
  
  for (final product in products) {
    await connection.execute(
      '''
      INSERT INTO products (
        title, description, price, old_price, discount,
        image_url, product_url, brand, category_id, sku,
        specifications, stock, rating, review_count, source, source_id
      ) VALUES (
        @title, @description, @price, @old_price, @discount,
        @image_url, @product_url, @brand, @category_id, @sku,
        @specifications, @stock, @rating, @review_count, @source, @source_id
      ) ON CONFLICT (source, source_id) DO NOTHING
      ''',
      substitutionValues: product,
    );
  }
  
  print('‚úÖ –¢–æ–≤–∞—Ä—ã —Å–æ–∑–¥–∞–Ω—ã');
}

Future<void> _createTestUser(PostgreSQLConnection connection) async {
  print('üë§ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
  
  await connection.execute(
    '''
    INSERT INTO users (email, password_hash, name, phone)
    VALUES (@email, @password_hash, @name, @phone)
    ON CONFLICT (email) DO NOTHING
    ''',
    substitutionValues: {
      'email': 'test@example.com',
      'password_hash': 'password123', // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ - —Ö–µ—à
      'name': 'Test User',
      'phone': '+7 (999) 123-45-67',
    },
  );
  
  print('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω');
}
