import 'dart:io';
import 'package:shelf/shelf.dart';
import 'package:shelf/shelf_io.dart' as io;
import 'package:shelf_router/shelf_router.dart';
import 'package:shelf_cors_headers/shelf_cors_headers.dart';
import 'database.dart';

void main(List<String> args) async {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  try {
    await DatabaseService.runMigrations();
    print('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  } catch (e) {
    print('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: $e');
    return;
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
  final router = Router();

  // Health check
  router.get('/health', (Request request) {
    return Response.ok('OK', headers: {'content-type': 'text/plain'});
  });

  // API endpoints
  router.get('/api/products', _getProducts);
  router.get('/api/categories', _getCategories);
  router.post('/api/auth/register', _register);
  router.post('/api/auth/login', _login);

  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ CORS
  final handler = Pipeline()
      .addMiddleware(corsHeaders())
      .addMiddleware(logRequests())
      .addHandler(router);

  // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
  final server = await io.serve(handler, '0.0.0.0', 8080);
  print('üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8080');

  // Graceful shutdown
  ProcessSignal.sigint.watch().listen((_) async {
    print('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
    await server.close();
    await DatabaseService.closeConnection();
    exit(0);
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ API
Future<Response> _getProducts(Request request) async {
  try {
    final conn = await DatabaseService.getConnection();
    final result = await conn.query('SELECT * FROM products LIMIT 10');
    
    final products = result.map((row) => {
      'id': row[0],
      'title': row[1],
      'price': row[3],
      'image_url': row[6],
      'brand': row[8],
    }).toList();
    
    return Response.ok(
      '{"products": $products}',
      headers: {'content-type': 'application/json'},
    );
  } catch (e) {
    return Response.internalServerError(
      body: '{"error": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: $e"}',
      headers: {'content-type': 'application/json'},
    );
  }
}

Future<Response> _getCategories(Request request) async {
  try {
    final conn = await DatabaseService.getConnection();
    final result = await conn.query('SELECT * FROM categories');
    
    final categories = result.map((row) => {
      'id': row[0],
      'name': row[1],
      'description': row[2],
      'icon': row[3],
    }).toList();
    
    return Response.ok(
      '{"categories": $categories}',
      headers: {'content-type': 'application/json'},
    );
  } catch (e) {
    return Response.internalServerError(
      body: '{"error": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: $e"}',
      headers: {'content-type': 'application/json'},
    );
  }
}

Future<Response> _register(Request request) async {
  try {
    // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–µ–∑ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    return Response.ok(
      '{"message": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞", "user_id": "123"}',
      headers: {'content-type': 'application/json'},
    );
  } catch (e) {
    return Response.internalServerError(
      body: '{"error": "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: $e"}',
      headers: {'content-type': 'application/json'},
    );
  }
}

Future<Response> _login(Request request) async {
  try {
    // –ü—Ä–æ—Å—Ç–æ–π –≤—Ö–æ–¥ –±–µ–∑ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    return Response.ok(
      '{"message": "–í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω", "token": "fake_jwt_token"}',
      headers: {'content-type': 'application/json'},
    );
  } catch (e) {
    return Response.internalServerError(
      body: '{"error": "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: $e"}',
      headers: {'content-type': 'application/json'},
    );
  }
}
