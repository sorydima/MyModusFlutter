import 'dart:convert';
import 'dart:io';
import 'package:logger/logger.dart';
import '../models.dart';
import 'notification_service.dart';

/// –°–µ—Ä–≤–∏—Å –º–æ–±–∏–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
class MobileCapabilitiesService {
  final NotificationService _notificationService;
  final Logger _logger = Logger();

  // –ö—ç—à –¥–ª—è –æ—Ñ–ª–∞–π–Ω –¥–∞–Ω–Ω—ã—Ö
  final Map<String, Map<String, dynamic>> _offlineCache = {};
  
  // –ì–µ–æ–ª–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  final Map<String, UserLocation> _userLocations = {};
  
  // –ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
  final Map<String, List<CalendarEvent>> _userEvents = {};

  MobileCapabilitiesService({
    required NotificationService notificationService,
  }) : _notificationService = notificationService;

  // ===== –û–§–õ–ê–ô–ù –†–ï–ñ–ò–ú =====

  /// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ñ–ª–∞–π–Ω –∫—ç—à
  Future<void> saveToOfflineCache({
    required String userId,
    required String dataType,
    required Map<String, dynamic> data,
  }) async {
    try {
      if (!_offlineCache.containsKey(userId)) {
        _offlineCache[userId] = {};
      }
      
      _offlineCache[userId]![dataType] = {
        'data': data,
        'timestamp': DateTime.now().toIso8601String(),
        'version': '1.0',
      };

      _logger.i('Saved $dataType to offline cache for user $userId');
    } catch (e) {
      _logger.e('Failed to save to offline cache: $e');
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—Ñ–ª–∞–π–Ω –∫—ç—à–∞
  Map<String, dynamic>? getFromOfflineCache({
    required String userId,
    required String dataType,
  }) {
    try {
      final cache = _offlineCache[userId];
      if (cache != null && cache.containsKey(dataType)) {
        final cachedData = cache[dataType]!;
        final timestamp = DateTime.parse(cachedData['timestamp']);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∫—ç—à–∞ (24 —á–∞—Å–∞)
        if (DateTime.now().difference(timestamp).inHours < 24) {
          return cachedData['data'];
        }
      }
      return null;
    } catch (e) {
      _logger.e('Failed to get from offline cache: $e');
      return null;
    }
  }

  /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ñ–ª–∞–π–Ω –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–æ–º
  Future<SyncResult> syncOfflineData({
    required String userId,
    required List<String> dataTypes,
  }) async {
    try {
      final syncResult = SyncResult(
        userId: userId,
        timestamp: DateTime.now(),
        syncedTypes: [],
        failedTypes: [],
        conflicts: [],
      );

      for (final dataType in dataTypes) {
        final offlineData = getFromOfflineCache(userId: userId, dataType: dataType);
        if (offlineData != null) {
          try {
            // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
            await _syncDataType(userId: userId, dataType: dataType, data: offlineData);
            syncResult.syncedTypes.add(dataType);
            
            // –û—á–∏—â–∞–µ–º —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            _offlineCache[userId]?.remove(dataType);
          } catch (e) {
            syncResult.failedTypes.add(dataType);
            _logger.e('Failed to sync $dataType: $e');
          }
        }
      }

      _logger.i('Sync completed for user $userId: ${syncResult.syncedTypes.length} synced, ${syncResult.failedTypes.length} failed');
      return syncResult;
    } catch (e) {
      _logger.e('Failed to sync offline data: $e');
      rethrow;
    }
  }

  // ===== –ì–ï–û–õ–û–ö–ê–¶–ò–Ø =====

  /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<void> updateUserLocation({
    required String userId,
    required double latitude,
    required double longitude,
    String? address,
    double? accuracy,
  }) async {
    try {
      final location = UserLocation(
        userId: userId,
        latitude: latitude,
        longitude: longitude,
        address: address,
        accuracy: accuracy,
        timestamp: DateTime.now(),
      );

      _userLocations[userId] = location;
      _logger.i('Updated location for user $userId: $latitude, $longitude');
    } catch (e) {
      _logger.e('Failed to update user location: $e');
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  UserLocation? getUserLocation(String userId) {
    return _userLocations[userId];
  }

  /// –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
  Future<List<GeolocationOffer>> getNearbyOffers({
    required String userId,
    required double radiusKm,
    String? category,
  }) async {
    try {
      final userLocation = getUserLocation(userId);
      if (userLocation == null) {
        return [];
      }

      // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
      // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ
      final offers = <GeolocationOffer>[];
      
      // –î–µ–º–æ: –º–∞–≥–∞–∑–∏–Ω—ã –≤ —Ä–∞–¥–∏—É—Å–µ
      final nearbyStores = [
        {'name': 'Zara', 'distance': 0.5, 'category': '–û–¥–µ–∂–¥–∞'},
        {'name': 'H&M', 'distance': 1.2, 'category': '–û–¥–µ–∂–¥–∞'},
        {'name': 'Nike', 'distance': 2.1, 'category': '–û–±—É–≤—å'},
      ];

      for (final store in nearbyStores) {
        if (category == null || store['category'] == category) {
          offers.add(GeolocationOffer(
            id: 'store_${store['name']}',
            name: store['name'] as String,
            category: store['category'] as String,
            distance: store['distance'] as double,
            latitude: userLocation.latitude + (store['distance'] as double) * 0.01,
            longitude: userLocation.longitude + (store['distance'] as double) * 0.01,
            offers: [
              {'type': '–°–∫–∏–¥–∫–∞ 20%', 'description': '–ù–∞ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã'},
              {'type': '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞', 'description': '–ü—Ä–∏ –∑–∞–∫–∞–∑–µ –æ—Ç 5000‚ÇΩ'},
            ],
          ));
        }
      }

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
      offers.sort((a, b) => a.distance.compareTo(b.distance));
      
      return offers;
    } catch (e) {
      _logger.e('Failed to get nearby offers: $e');
      return [];
    }
  }

  // ===== –ö–ê–õ–ï–ù–î–ê–†–¨ =====

  /// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<void> addCalendarEvent({
    required String userId,
    required String title,
    required String description,
    required DateTime startTime,
    required DateTime endTime,
    String? location,
    String? eventType,
    Map<String, dynamic>? metadata,
  }) async {
    try {
      final event = CalendarEvent(
        id: 'event_${DateTime.now().millisecondsSinceEpoch}',
        userId: userId,
        title: title,
        description: description,
        startTime: startTime,
        endTime: endTime,
        location: location,
        eventType: eventType,
        metadata: metadata,
        createdAt: DateTime.now(),
      );

      if (!_userEvents.containsKey(userId)) {
        _userEvents[userId] = [];
      }
      
      _userEvents[userId]!.add(event);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏–∏
      await _notificationService.createNotification(
        userId: userId,
        type: NotificationType.calendarEvent,
        title: 'üìÖ –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ: $title',
        body: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏–∏ $startTime',
        data: {
          'event_id': event.id,
          'event_type': eventType,
          'start_time': startTime.toIso8601String(),
        },
      );

      _logger.i('Added calendar event for user $userId: $title');
    } catch (e) {
      _logger.e('Failed to add calendar event: $e');
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  List<CalendarEvent> getUserEvents({
    required String userId,
    DateTime? startDate,
    DateTime? endDate,
    String? eventType,
  }) {
    try {
      final events = _userEvents[userId] ?? [];
      
      var filteredEvents = events;
      
      if (startDate != null) {
        filteredEvents = filteredEvents.where((e) => e.startTime.isAfter(startDate)).toList();
      }
      
      if (endDate != null) {
        filteredEvents = filteredEvents.where((e) => e.endTime.isBefore(endDate)).toList();
      }
      
      if (eventType != null) {
        filteredEvents = filteredEvents.where((e) => e.eventType == eventType).toList();
      }
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
      filteredEvents.sort((a, b) => a.startTime.compareTo(b.startTime));
      
      return filteredEvents;
    } catch (e) {
      _logger.e('Failed to get user events: $e');
      return [];
    }
  }

  // ===== –§–û–ù–û–í–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø =====

  /// –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  Future<BackgroundSyncResult> startBackgroundSync({
    required String userId,
    List<String>? dataTypes,
  }) async {
    try {
      _logger.i('Starting background sync for user $userId');
      
      final syncResult = await syncOfflineData(
        userId: userId,
        dataTypes: dataTypes ?? ['products', 'notifications', 'preferences'],
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      final hasNewNotifications = await _checkNewNotifications(userId);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
      final locationUpdates = await _checkLocationUpdates(userId);
      
      return BackgroundSyncResult(
        userId: userId,
        timestamp: DateTime.now(),
        syncResult: syncResult,
        hasNewNotifications: hasNewNotifications,
        locationUpdates: locationUpdates,
        success: true,
      );
    } catch (e) {
      _logger.e('Background sync failed: $e');
      return BackgroundSyncResult(
        userId: userId,
        timestamp: DateTime.now(),
        syncResult: null,
        hasNewNotifications: false,
        locationUpdates: [],
        success: false,
        error: e.toString(),
      );
    }
  }

  // ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====

  Future<void> _syncDataType({
    required String userId,
    required String dataType,
    required Map<String, dynamic> data,
  }) async {
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
    await Future.delayed(Duration(milliseconds: 100)); // –ò–º–∏—Ç–∞—Ü–∏—è
  }

  Future<bool> _checkNewNotifications(String userId) async {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    return false; // –ò–º–∏—Ç–∞—Ü–∏—è
  }

  Future<List<LocationUpdate>> _checkLocationUpdates(String userId) async {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    return []; // –ò–º–∏—Ç–∞—Ü–∏—è
  }

  /// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  void cleanupOldData() {
    try {
      final now = DateTime.now();
      
      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)
      _offlineCache.forEach((userId, userCache) {
        userCache.removeWhere((key, value) {
          final timestamp = DateTime.parse(value['timestamp']);
          return now.difference(timestamp).inDays > 7;
        });
      });
      
      // –û—á–∏—â–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      _offlineCache.removeWhere((userId, userCache) => userCache.isEmpty);
      
      _logger.i('Cleanup completed');
    } catch (e) {
      _logger.e('Cleanup failed: $e');
    }
  }
}

// ===== –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–• =====

class UserLocation {
  final String userId;
  final double latitude;
  final double longitude;
  final String? address;
  final double? accuracy;
  final DateTime timestamp;

  UserLocation({
    required this.userId,
    required this.latitude,
    required this.longitude,
    this.address,
    this.accuracy,
    required this.timestamp,
  });

  Map<String, dynamic> toJson() => {
    'userId': userId,
    'latitude': latitude,
    'longitude': longitude,
    'address': address,
    'accuracy': accuracy,
    'timestamp': timestamp.toIso8601String(),
  };

  factory UserLocation.fromJson(Map<String, dynamic> json) => UserLocation(
    userId: json['userId'],
    latitude: json['latitude'],
    longitude: json['longitude'],
    address: json['address'],
    accuracy: json['accuracy'],
    timestamp: DateTime.parse(json['timestamp']),
  );
}

class GeolocationOffer {
  final String id;
  final String name;
  final String category;
  final double distance;
  final double latitude;
  final double longitude;
  final List<Map<String, String>> offers;

  GeolocationOffer({
    required this.id,
    required this.name,
    required this.category,
    required this.distance,
    required this.latitude,
    required this.longitude,
    required this.offers,
  });

  Map<String, dynamic> toJson() => {
    'id': id,
    'name': name,
    'category': category,
    'distance': distance,
    'latitude': latitude,
    'longitude': longitude,
    'offers': offers,
  };
}

class CalendarEvent {
  final String id;
  final String userId;
  final String title;
  final String description;
  final DateTime startTime;
  final DateTime endTime;
  final String? location;
  final String? eventType;
  final Map<String, dynamic>? metadata;
  final DateTime createdAt;

  CalendarEvent({
    required this.id,
    required this.userId,
    required this.title,
    required this.description,
    required this.startTime,
    required this.endTime,
    this.location,
    this.eventType,
    this.metadata,
    required this.createdAt,
  });

  Map<String, dynamic> toJson() => {
    'id': id,
    'userId': userId,
    'title': title,
    'description': description,
    'startTime': startTime.toIso8601String(),
    'endTime': endTime.toIso8601String(),
    'location': location,
    'eventType': eventType,
    'metadata': metadata,
    'createdAt': createdAt.toIso8601String(),
  };
}

class SyncResult {
  final String userId;
  final DateTime timestamp;
  final List<String> syncedTypes;
  final List<String> failedTypes;
  final List<String> conflicts;

  SyncResult({
    required this.userId,
    required this.timestamp,
    required this.syncedTypes,
    required this.failedTypes,
    required this.conflicts,
  });

  Map<String, dynamic> toJson() => {
    'userId': userId,
    'timestamp': timestamp.toIso8601String(),
    'syncedTypes': syncedTypes,
    'failedTypes': failedTypes,
    'conflicts': conflicts,
  };
}

class BackgroundSyncResult {
  final String userId;
  final DateTime timestamp;
  final SyncResult? syncResult;
  final bool hasNewNotifications;
  final List<LocationUpdate> locationUpdates;
  final bool success;
  final String? error;

  BackgroundSyncResult({
    required this.userId,
    required this.timestamp,
    this.syncResult,
    required this.hasNewNotifications,
    required this.locationUpdates,
    required this.success,
    this.error,
  });

  Map<String, dynamic> toJson() => {
    'userId': userId,
    'timestamp': timestamp.toIso8601String(),
    'syncResult': syncResult?.toJson(),
    'hasNewNotifications': hasNewNotifications,
    'locationUpdates': locationUpdates.map((u) => u.toJson()).toList(),
    'success': success,
    'error': error,
  };
}

class LocationUpdate {
  final String type;
  final String description;
  final DateTime timestamp;

  LocationUpdate({
    required this.type,
    required this.description,
    required this.timestamp,
  });

  Map<String, dynamic> toJson() => {
    'type': type,
    'description': description,
    'timestamp': timestamp.toIso8601String(),
  };
}
