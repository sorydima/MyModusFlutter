import 'package:logger/logger.dart';
import 'notification_service.dart';
import '../models.dart';

/// –°–µ—Ä–≤–∏—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –¥—Ä—É–≥–∏–º–∏ –º–æ–¥—É–ª—è–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
class NotificationIntegrationService {
  final NotificationService _notificationService;
  final Logger _logger = Logger();

  NotificationIntegrationService({
    required NotificationService notificationService,
  }) : _notificationService = notificationService;

  // ===== AI PERSONAL SHOPPER INTEGRATION =====

  /// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤—ã—Ö AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö
  Future<void> notifyNewRecommendations({
    required String userId,
    required List<ProductRecommendation> recommendations,
    String? category,
  }) async {
    try {
      final title = 'üéØ –ù–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤–∞—Å';
      final body = category != null 
          ? '–û—Ç–∫—Ä—ã–ª–∏ $category —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—å—Å—è'
          : '–£ –Ω–∞—Å –µ—Å—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å';

      await _notificationService.createNotification(
        userId: userId,
        type: NotificationType.newRecommendations,
        title: title,
        body: body,
        data: {
          'recommendations_count': recommendations.length,
          'category': category,
          'product_ids': recommendations.map((r) => r.product.id).toList(),
        },
      );

      _logger.i('Sent new recommendations notification to user $userId');
    } catch (e) {
      _logger.e('Failed to send recommendations notification: $e');
    }
  }

  /// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–Ω–∏–∂–µ–Ω–∏–∏ —Ü–µ–Ω—ã –Ω–∞ —Ç–æ–≤–∞—Ä –∏–∑ wishlist
  Future<void> notifyPriceAlert({
    required String userId,
    required Product product,
    required int oldPrice,
    required int newPrice,
    int? discount,
  }) async {
    try {
      final priceDiff = oldPrice - newPrice;
      final discountPercent = ((priceDiff / oldPrice) * 100).round();
      
      final title = 'üí∞ –¶–µ–Ω–∞ —Å–Ω–∏–∂–µ–Ω–∞!';
      final body = '${product.title} –ø–æ–¥–µ—à–µ–≤–µ–ª –Ω–∞ $discountPercent% - —Ç–µ–ø–µ—Ä—å ${newPrice}‚ÇΩ';

      await _notificationService.createNotification(
        userId: userId,
        type: NotificationType.priceAlert,
        title: title,
        body: body,
        data: {
          'product_id': product.id,
          'old_price': oldPrice,
          'new_price': newPrice,
          'discount_percent': discountPercent,
          'discount_amount': priceDiff,
        },
      );

      _logger.i('Sent price alert notification to user $userId for product ${product.id}');
    } catch (e) {
      _logger.e('Failed to send price alert notification: $e');
    }
  }

  /// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏
  Future<void> notifyPersonalizedOffer({
    required String userId,
    required String offerType,
    required String description,
    Map<String, dynamic>? offerData,
  }) async {
    try {
      final title = 'üéÅ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ';
      final body = description;

      await _notificationService.createNotification(
        userId: userId,
        type: NotificationType.personalizedOffer,
        title: title,
        body: body,
        data: {
          'offer_type': offerType,
          ...?offerData,
        },
      );

      _logger.i('Sent personalized offer notification to user $userId');
    } catch (e) {
      _logger.e('Failed to send personalized offer notification: $e');
    }
  }

  // ===== AR FITTING INTEGRATION =====

  /// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ AR –ø—Ä–∏–º–µ—Ä–∫–∏
  Future<void> notifyARFittingComplete({
    required String userId,
    required String productName,
    required Map<String, dynamic> fittingResults,
  }) async {
    try {
      final title = 'üëó –ü—Ä–∏–º–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞';
      final body = '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏–º–µ—Ä–∫–∏ $productName –≥–æ—Ç–æ–≤—ã';

      await _notificationService.createNotification(
        userId: userId,
        type: NotificationType.arFittingComplete,
        title: title,
        body: body,
        data: {
          'product_name': productName,
          'fitting_results': fittingResults,
          'timestamp': DateTime.now().toIso8601String(),
        },
      );

      _logger.i('Sent AR fitting complete notification to user $userId');
    } catch (e) {
      _logger.e('Failed to send AR fitting notification: $e');
    }
  }

  /// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
  Future<void> notifySizeRecommendation({
    required String userId,
    required String productName,
    required String recommendedSize,
    String? reason,
  }) async {
    try {
      final title = 'üìè –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞';
      final body = '–î–ª—è $productName —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Ä–∞–∑–º–µ—Ä $recommendedSize';

      await _notificationService.createNotification(
        userId: userId,
        type: NotificationType.sizeRecommendation,
        title: title,
        body: body,
        data: {
          'product_name': productName,
          'recommended_size': recommendedSize,
          'reason': reason,
        },
      );

      _logger.i('Sent size recommendation notification to user $userId');
    } catch (e) {
      _logger.e('Failed to send size recommendation notification: $e');
    }
  }

  /// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–ª–∞
  Future<void> notifyBodyAnalysisUpdate({
    required String userId,
    required Map<String, dynamic> bodyMetrics,
    String? insight,
  }) async {
    try {
      final title = 'üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–ª–∞';
      final body = insight ?? '–í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã';

      await _notificationService.createNotification(
        userId: userId,
        type: NotificationType.bodyAnalysisUpdate,
        title: title,
        body: body,
        data: {
          'body_metrics': bodyMetrics,
          'updated_at': DateTime.now().toIso8601String(),
        },
      );

      _logger.i('Sent body analysis update notification to user $userId');
    } catch (e) {
      _logger.e('Failed to send body analysis notification: $e');
    }
  }

  // ===== BLOCKCHAIN LOYALTY INTEGRATION =====

  /// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
  Future<void> notifyLoyaltyPointsEarned({
    required String userId,
    required int points,
    required String reason,
    String? source,
  }) async {
    try {
      final title = '‚≠ê –ë–æ–Ω—É—Å–Ω—ã–µ –±–∞–ª–ª—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã';
      final body = '–í—ã –ø–æ–ª—É—á–∏–ª–∏ $points –±–∞–ª–ª–æ–≤ –∑–∞ $reason';

      await _notificationService.createNotification(
        userId: userId,
        type: NotificationType.loyaltyPointsEarned,
        title: title,
        body: body,
        data: {
          'points': points,
          'reason': reason,
          'source': source,
          'timestamp': DateTime.now().toIso8601String(),
        },
      );

      _logger.i('Sent loyalty points notification to user $userId');
    } catch (e) {
      _logger.e('Failed to send loyalty points notification: $e');
    }
  }

  /// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
  Future<void> notifyTierUpgrade({
    required String userId,
    required String oldTier,
    required String newTier,
    required List<String> newBenefits,
  }) async {
    try {
      final title = 'üèÜ –£—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω!';
      final body = '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è $newTier';

      await _notificationService.createNotification(
        userId: userId,
        type: NotificationType.tierUpgrade,
        title: title,
        body: body,
        data: {
          'old_tier': oldTier,
          'new_tier': newTier,
          'new_benefits': newBenefits,
          'upgraded_at': DateTime.now().toIso8601String(),
        },
      );

      _logger.i('Sent tier upgrade notification to user $userId');
    } catch (e) {
      _logger.e('Failed to send tier upgrade notification: $e');
    }
  }

  /// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º –±–æ–Ω—É—Å–µ
  Future<void> notifyReferralBonus({
    required String userId,
    required String referredUserName,
    required int bonusPoints,
  }) async {
    try {
      final title = 'üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å';
      final body = '–í–∞—à –¥—Ä—É–≥ $referredUserName –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è! –í—ã –ø–æ–ª—É—á–∏–ª–∏ $bonusPoints –±–∞–ª–ª–æ–≤';

      await _notificationService.createNotification(
        userId: userId,
        type: NotificationType.referralBonus,
        title: title,
        body: body,
        data: {
          'referred_user_name': referredUserName,
          'bonus_points': bonusPoints,
          'timestamp': DateTime.now().toIso8601String(),
        },
      );

      _logger.i('Sent referral bonus notification to user $userId');
    } catch (e) {
      _logger.e('Failed to send referral bonus notification: $e');
    }
  }

  /// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–º –≤—Ö–æ–¥–µ
  Future<void> notifyDailyLoginReward({
    required String userId,
    required int points,
    required int streakDays,
  }) async {
    try {
      final title = 'üåÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å';
      final body = '–°–µ–≥–æ–¥–Ω—è –≤—ã –ø–æ–ª—É—á–∏–ª–∏ $points –±–∞–ª–ª–æ–≤! –°–µ—Ä–∏—è: $streakDays –¥–Ω–µ–π';

      await _notificationService.createNotification(
        userId: userId,
        type: NotificationType.dailyLoginReward,
        title: title,
        body: body,
        data: {
          'points': points,
          'streak_days': streakDays,
          'login_date': DateTime.now().toIso8601String(),
        },
      );

      _logger.i('Sent daily login reward notification to user $userId');
    } catch (e) {
      _logger.e('Failed to send daily login reward notification: $e');
    }
  }

  /// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—Ä–∏–ø—Ç–æ-–Ω–∞–≥—Ä–∞–¥–µ
  Future<void> notifyCryptoReward({
    required String userId,
    required String tokenAmount,
    required String tokenSymbol,
    required String reason,
  }) async {
    try {
      final title = 'ü™ô –ö—Ä–∏–ø—Ç–æ-–Ω–∞–≥—Ä–∞–¥–∞';
      final body = '–í—ã –ø–æ–ª—É—á–∏–ª–∏ $tokenAmount $tokenSymbol –∑–∞ $reason';

      await _notificationService.createNotification(
        userId: userId,
        type: NotificationType.cryptoReward,
        title: title,
        body: body,
        data: {
          'token_amount': tokenAmount,
          'token_symbol': tokenSymbol,
          'reason': reason,
          'timestamp': DateTime.now().toIso8601String(),
        },
      );

      _logger.i('Sent crypto reward notification to user $userId');
    } catch (e) {
      _logger.e('Failed to send crypto reward notification: $e');
    }
  }

  // ===== SOCIAL ANALYTICS INTEGRATION =====

  /// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç—Ä–µ–Ω–¥–µ
  Future<void> notifyTrendAlert({
    required String userId,
    required String trendType,
    required String description,
    required Map<String, dynamic> trendData,
  }) async {
    try {
      final title = 'üìà –ù–æ–≤—ã–π —Ç—Ä–µ–Ω–¥';
      final body = description;

      await _notificationService.createNotification(
        userId: userId,
        type: NotificationType.trendAlert,
        title: title,
        body: body,
        data: {
          'trend_type': trendType,
          'trend_data': trendData,
          'detected_at': DateTime.now().toIso8601String(),
        },
      );

      _logger.i('Sent trend alert notification to user $userId');
    } catch (e) {
      _logger.e('Failed to send trend alert notification: $e');
    }
  }

  /// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞
  Future<void> notifyCompetitorUpdate({
    required String userId,
    required String competitorName,
    required String updateType,
    required String description,
  }) async {
    try {
      final title = 'üëÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞';
      final body = '$competitorName: $description';

      await _notificationService.createNotification(
        userId: userId,
        type: NotificationType.competitorUpdate,
        title: title,
        body: body,
        data: {
          'competitor_name': competitorName,
          'update_type': updateType,
          'description': description,
          'timestamp': DateTime.now().toIso8601String(),
        },
      );

      _logger.i('Sent competitor update notification to user $userId');
    } catch (e) {
      _logger.e('Failed to send competitor update notification: $e');
    }
  }

  /// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–Ω—Å–∞–π—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏
  Future<void> notifyAudienceInsight({
    required String userId,
    required String insightType,
    required String description,
    required Map<String, dynamic> insightData,
  }) async {
    try {
      final title = 'üë• –ò–Ω—Å–∞–π—Ç –∞—É–¥–∏—Ç–æ—Ä–∏–∏';
      final body = description;

      await _notificationService.createNotification(
        userId: userId,
        type: NotificationType.audienceInsight,
        title: title,
        body: body,
        data: {
          'insight_type': insightType,
          'insight_data': insightData,
          'discovered_at': DateTime.now().toIso8601String(),
        },
      );

      _logger.i('Sent audience insight notification to user $userId');
    } catch (e) {
      _logger.e('Failed to send audience insight notification: $e');
    }
  }

  // ===== SOCIAL COMMERCE INTEGRATION =====

  /// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –æ live-—Å—Ç—Ä–∏–º–µ
  Future<void> notifyLiveStreamReminder({
    required String userId,
    required String streamTitle,
    required DateTime streamTime,
    String? hostName,
  }) async {
    try {
      final timeUntil = streamTime.difference(DateTime.now());
      final minutesUntil = timeUntil.inMinutes;
      
      String body;
      if (minutesUntil <= 0) {
        body = 'Live-—Å—Ç—Ä–∏–º "$streamTitle" –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–µ–π—á–∞—Å!';
      } else if (minutesUntil < 60) {
        body = 'Live-—Å—Ç—Ä–∏–º "$streamTitle" —á–µ—Ä–µ–∑ $minutesUntil –º–∏–Ω—É—Ç';
      } else {
        final hoursUntil = timeUntil.inHours;
        body = 'Live-—Å—Ç—Ä–∏–º "$streamTitle" —á–µ—Ä–µ–∑ $hoursUntil —á–∞—Å–æ–≤';
      }

      final title = 'üì∫ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ live-—Å—Ç—Ä–∏–º–µ';

      await _notificationService.createNotification(
        userId: userId,
        type: NotificationType.liveStreamReminder,
        title: title,
        body: body,
        data: {
          'stream_title': streamTitle,
          'stream_time': streamTime.toIso8601String(),
          'host_name': hostName,
          'minutes_until': minutesUntil,
        },
      );

      _logger.i('Sent live stream reminder notification to user $userId');
    } catch (e) {
      _logger.e('Failed to send live stream reminder notification: $e');
    }
  }

  /// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø–æ–≤–æ–π –ø–æ–∫—É–ø–∫–∏
  Future<void> notifyGroupPurchaseUpdate({
    required String userId,
    required String productName,
    required String updateType,
    required String description,
    Map<String, dynamic>? updateData,
  }) async {
    try {
      final title = 'üë• –ì—Ä—É–ø–ø–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞';
      final body = description;

      await _notificationService.createNotification(
        userId: userId,
        type: NotificationType.groupPurchaseUpdate,
        title: title,
        body: body,
        data: {
          'product_name': productName,
          'update_type': updateType,
          'update_data': updateData,
          'timestamp': DateTime.now().toIso8601String(),
        },
      );

      _logger.i('Sent group purchase update notification to user $userId');
    } catch (e) {
      _logger.e('Failed to send group purchase update notification: $e');
    }
  }

  /// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –æ—Ç–∑—ã–≤–µ
  Future<void> notifyNewReview({
    required String userId,
    required String productName,
    required String reviewerName,
    required int rating,
    String? comment,
  }) async {
    try {
      final title = '‚≠ê –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤';
      final body = '$reviewerName –æ—Å—Ç–∞–≤–∏–ª –æ—Ç–∑—ã–≤ –Ω–∞ $productName';

      await _notificationService.createNotification(
        userId: userId,
        type: NotificationType.newReview,
        title: title,
        body: body,
        data: {
          'product_name': productName,
          'reviewer_name': reviewerName,
          'rating': rating,
          'comment': comment,
          'reviewed_at': DateTime.now().toIso8601String(),
        },
      );

      _logger.i('Sent new review notification to user $userId');
    } catch (e) {
      _logger.e('Failed to send new review notification: $e');
    }
  }

  /// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞
  Future<void> notifyPartnershipApproved({
    required String userId,
    required String partnershipType,
    required String description,
    Map<String, dynamic>? partnershipData,
  }) async {
    try {
      final title = 'ü§ù –ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ –æ–¥–æ–±—Ä–µ–Ω–æ';
      final body = description;

      await _notificationService.createNotification(
        userId: userId,
        type: NotificationType.partnershipApproved,
        title: title,
        body: body,
        data: {
          'partnership_type': partnershipType,
          'partnership_data': partnershipData,
          'approved_at': DateTime.now().toIso8601String(),
        },
      );

      _logger.i('Sent partnership approved notification to user $userId');
    } catch (e) {
      _logger.e('Failed to send partnership approved notification: $e');
    }
  }

  // ===== GENERAL SYSTEM NOTIFICATIONS =====

  /// –°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  Future<void> notifySystemUpdate({
    required String userId,
    required String title,
    required String body,
    Map<String, dynamic>? data,
  }) async {
    try {
      await _notificationService.createNotification(
        userId: userId,
        type: NotificationType.systemUpdate,
        title: title,
        body: body,
        data: data,
      );

      _logger.i('Sent system update notification to user $userId');
    } catch (e) {
      _logger.e('Failed to send system update notification: $e');
    }
  }

  /// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏
  Future<void> notifyMaintenance({
    required String userId,
    required String maintenanceType,
    required DateTime startTime,
    required DateTime endTime,
    String? description,
  }) async {
    try {
      final title = 'üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ';
      final body = description ?? '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ';

      await _notificationService.createNotification(
        userId: userId,
        type: NotificationType.maintenance,
        title: title,
        body: body,
        data: {
          'maintenance_type': maintenanceType,
          'start_time': startTime.toIso8601String(),
          'end_time': endTime.toIso8601String(),
          'description': description,
        },
      );

      _logger.i('Sent maintenance notification to user $userId');
    } catch (e) {
      _logger.e('Failed to send maintenance notification: $e');
    }
  }

  /// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  Future<void> notifySecurityAlert({
    required String userId,
    required String alertType,
    required String description,
    required String severity,
    Map<String, dynamic>? securityData,
  }) async {
    try {
      final title = 'üîí –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏';
      final body = description;

      await _notificationService.createNotification(
        userId: userId,
        type: NotificationType.securityAlert,
        title: title,
        body: body,
        data: {
          'alert_type': alertType,
          'severity': severity,
          'security_data': securityData,
          'alerted_at': DateTime.now().toIso8601String(),
        },
      );

      _logger.i('Sent security alert notification to user $userId');
    } catch (e) {
      _logger.e('Failed to send security alert notification: $e');
    }
  }

  // ===== BULK NOTIFICATIONS =====

  /// –û—Ç–ø—Ä–∞–≤–∫–∞ –º–∞—Å—Å–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  Future<void> sendBulkNotificationsByCategory({
    required String category,
    required String title,
    required String body,
    required NotificationType type,
    Map<String, dynamic>? data,
    List<String>? excludeUserIds,
  }) async {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      final userIds = await _getUserIdsByCategory(category);
      
      if (excludeUserIds != null) {
        userIds.removeWhere((id) => excludeUserIds.contains(id));
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      for (final userId in userIds) {
        await _notificationService.createNotification(
          userId: userId,
          type: type,
          title: title,
          body: body,
          data: data,
        );
      }

      _logger.i('Sent bulk notifications to ${userIds.length} users in category $category');
    } catch (e) {
      _logger.e('Failed to send bulk notifications: $e');
    }
  }

  /// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  Future<void> sendBulkNotificationsToUsers({
    required List<String> userIds,
    required String title,
    required String body,
    required NotificationType type,
    Map<String, dynamic>? data,
  }) async {
    try {
      for (final userId in userIds) {
        await _notificationService.createNotification(
          userId: userId,
          type: type,
          title: title,
          body: body,
          data: data,
        );
      }

      _logger.i('Sent bulk notifications to ${userIds.length} users');
    } catch (e) {
      _logger.e('Failed to send bulk notifications: $e');
    }
  }

  // ===== HELPER METHODS =====

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∑–∞–≥–ª—É—à–∫–∞)
  Future<List<String>> _getUserIdsByCategory(String category) async {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    return [];
  }

  /// –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
  void dispose() {
    // –ù–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
  }
}
